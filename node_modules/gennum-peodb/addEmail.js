//============================================================================//

var print = console.log;

var peodbUtils = require('./peodbUtils.js');

//============================================================================//

var requiredArgs = [
  'email_type',
  'subject',
  'from',
//'to',
//'cc',          // optional
//'bcc',         // optional
//'reply_to',    // optional
//'data_text',   // optional
//'data_html',   // optional
//'attachments', // optional - {
//   data: Buffer,
//   file_name: '',
//   mimetype: '',
//   cid: '',
// }
];

//============================================================================//

exports.addEmail = function(db, args, cb) {

  var missingArg = peodbUtils.checkArgs(requiredArgs, args);
  if (missingArg) {
    return cb(Error('missing required argument: ' + missingArg));
  }

  db.transaction(
    function(cb) {
      addEmail(db, args, cb);
    },
  cb);
}

//============================================================================//

function addEmail(db, args, cb) {
  var qStr =
    'INSERT INTO emails'
  + '(email_type'
  + ',create_time'
  + ',from_address'
  + ',reply_to'
  + ',subject'
  + ',data_text'
  + ',data_html'
  + ') VALUES'
  + '(' + db.escape(args.email_type)
  + ',UNIX_TIMESTAMP()'
  + ',' + db.escape(args.from_address)
  + ',' + db.escape(args.reply_to)
  + ',' + db.escape(args.subject)
  + ',' + db.escape(args.data_text)
  + ',' + db.escape(args.data_html)
  + ')'
  ;
  db.queryData(qStr, function(err, data) {
    if (err) {
      return cb(err);
    }

    var email_id = data.insertId;

    if (typeof(args.to)  === 'string')  { args.to  = [ args.to ];  }
    if (typeof(args.cc)  === 'string')  { args.cc  = [ args.cc ];  }
    if (typeof(args.bcc) === 'string')  { args.bcc = [ args.bcc ]; }

    var recipients = [
      { type: 'TO',  recipients: args.to  },
      { type: 'CC',  recipients: args.cc  },
      { type: 'BCC', recipients: args.bcc },
    ];

    async.forEachSeries(recipients,
      function(entry, cb) {
        if (!Array.isArray(entry.recipients)) {
          return cb();
        }
        addRecipients(db, email_id, entry, cb);
      },
      function(err) {
        if (err) {
          return cb(err);
        }
        addAttachments(db, email_id, args.attachmants, cb);
      }
    );
  });
}

//============================================================================//

function addRecipients(db, email_id, entry, cb) {
  if (!Array.isArray(entry.recipients)) {
    return cb();
  }
  async.forEachSeries(entry.recipients,
    function(recipient, cb) {
      var qStr =
        'INSERT IGNORE INTO email_recipients'
      + ' (email_id, address, recipient_type) VALUES '
      + '(' + db.escape(email_id)
      + ',' + db.escape(recipient)
      + ',' + db.escape(entry.type)
      + ')'
      ;
      db.queryData(qStr, cb);
    },
  cb);
}

//============================================================================//

function addAttachments(db, email_id, attachments, cb) {
  if (!Array. isArray(attachments, cb)) {
    return cb();
  }
  async.forEachSeries(attachments,
    function(attachment, cb) {
      var data = attachment.data;
      if (!(data instanceof Buffer)) {
        return cb(Error('invalid email attachment data type: ' + typeof(data)));
      }
      var encoding = 'base64';
      var qStr =
        'INSERT IGNORE email_attachments'
      + ' (data, data_encoding, file_name, cid, length, mimetype) VALUES'
      + '(' + db.escape(data.toString(encoding)) +
      + ',' + db.escape(encoding)
      + ',' + db.escape(attachment.file_name)
      + ',' + db.escape(attachment.cid)
      + ',' + db.escape(data.size())
      + ',' + db.escape(attachment.mimetype)
      ;
      db.queryData(qStr, cb);
    },
  cb);
}

//============================================================================//
