//============================================================================//

exports.addRoleEdit = addRoleEdit;
exports.addRoleCopy = addRoleCopy;

//============================================================================//

var async = require('async');

//============================================================================//

function addRoleEdit(db, args, object_id, cb) {
  var qStr =
    'INSERT INTO role_changesets ('
  + '  change_time'
  + ', change_type'
  + ', assigner_id'
  + ', action'
  + ', target_user_id'
  + ', object_id'
  + ', role_type_id'
  + ') VALUES'
  + '(' + 'UNIX_TIMESTAMP()'
  + ',' + db.escape('EDIT')
  + ',' + db.escape(args.assigner_id)
  + ',' + db.escape(args.action.toUpperCase())
  + ',' + db.escape(args.target_user_id)
  + ',' + db.escape(object_id)
  + ',' + db.escape(args.role_type_id)
  + ')'
  ;

  db.queryData(qStr, function(err, data) {
    if (err) {
      return cb(err);
    }

    var changesetID = data.insertId;

    var inserted = args.results.inserted;
    var deleted  = args.results.deleted;

    insertChanges(db, changesetID, 'INSERTED', inserted, function(err) {
      if (err) { return cb(err); }

      insertChanges(db, changesetID, 'DELETED', deleted, function(err) {

        return cb(err);
      });
    });
  });
}

//============================================================================//

function addRoleCopy(db, src_id, dst_id, inserted, cb) {
  var qStr =
    'INSERT INTO role_changesets ('
  + '  change_time'
  + ', change_type'
  + ', src_object_id'
  + ', dst_object_id'
  + ') VALUES'
  + '(' + 'UNIX_TIMESTAMP()'
  + ',' + db.escape('COPY')
  + ',' + db.escape(src_id)
  + ',' + db.escape(dst_id)
  + ')'
  ;

  db.queryData(qStr, function(err, data) {
    if (err) {
      return cb(err);
    }

    var changesetID = data.insertId;

    return insertChanges(db, changesetID, 'INSERTED', inserted, cb);
  });
}

//============================================================================//

function insertChanges(db, changesetID, action, changes, cb) {
  var action = db.escape(action.toUpperCase());
  var changesetID = db.escape(changesetID);
  async.forEachSeries(changes,
    function(change, cb) {
      var qStr =
        'INSERT INTO role_changes ('
      + '  role_changeset_id'
      + ', action'
      + ', object_id'
      + ', user_id'
      + ', role_type_id'
      + ') VALUES'
      + '(' + changesetID
      + ',' + action
      + ',' + db.escape(change.object_id)
      + ',' + db.escape(change.user_id)
      + ',' + db.escape(change.role_type_id)
      + ')'
      ;
      db.queryData(qStr, cb);
    },
  cb);
}

//============================================================================//

function insertEmail(db, role_changeset_id, cb) {
  var qStr =
    'SELECT DISTINCT rc.object_id'
  + ' FROM role_changesets cs'
  + ' JOIN role_changes    rc ON (rc.role_changeset_id = cs.role_changeset_id)'
  + ' WHERE rc.role_changeset_id = ' + db.escape(role_changeset_id)
  ;
  db.queryData(qStr, function(err, objs) {
    if (err) {
      return cb(err);
    }
  });
}

//============================================================================//

function addRoleEditEmail(db, args, object_id, cb) {
  // get the user info (including associated role types and role names)
  // get the object types and names
  // find the parent object for new objects  ("inherited from...")
  return cb();
}

//============================================================================//

function addRoleCopyEmail(db, src_id, dst_id, inserted, cb) {
  return cb();
}

//============================================================================//
