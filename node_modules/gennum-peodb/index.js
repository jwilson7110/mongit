//============================================================================//

var print = console.log;

var gmysql = require('gennum-mysql');

var assert = require('assert');

var defaultPEODB = null;

//============================================================================//
//
//  system users
//

var systemUsers = {
  PEO: { user_id: -1, name: 'PEO' },
  PRU: { user_id: -2, name: 'PRU' },
  YDB: { user_id: -3, name: 'YDB' },
};

//============================================================================//

exports.create = function(options) {
  return new PEODB(options);
}

exports.setDefault = function(options) {
  var peodb = (options instanceof PEODB) ? options : (new PEODB(options));
  defaultPEODB = peodb;
  return peodb;
}

exports.getDefault = function() {
  return defaultPEODB;
}

//============================================================================//

function PEODB(options) {
  if (!(this instanceof PEODB)) {
    return new PEODB(options);
  }

  this.systemUsers = systemUsers;

  // light copy of options
  this.dbOpts = {};
  for (var k in options) {
    this.dbOpts[k] = options[k];
  }
  // for simple accesses, no transactions
  this.sharedDB = gmysql.createClient(this.dbOpts);

  // email hooks
  this.emailRoleDeltas = function(deltas, cb) {
    return cb();
  };

  this.triggerEmails = function() {
    console.log('FIXME - peodb.triggerEmails() called');
  }
}

//============================================================================//

PEODB.prototype.end = function(cb) {
  var peodb = this;
  peodb.sharedDB.end(function(err) {
    delete peodb.sharedDB;
    if (cb) {
      return cb(err);
    }
  });
}

PEODB.prototype.escape = function(str) {
  return this.sharedDB.escape(str);
}

PEODB.prototype.dbSession = function(args, fn, cb) { // FIXME - use gmysql.isMySQLClient()
  var peodb = this;
  var argsDB = args.db;
  var db = null;

  if (typeof(args) !== 'function') {
    db = argsDB || gmysql.createClient(peodb.dbOpts);
  }
  else {
    cb = fn;
    fn = args;
    argsDB = null;
    db = gmysql.createClient(peodb.dbOpts);
  }

  args.db = db;

  fn(db, function() {
    if (!argsDB) {
      db.end();
      delete args.db;
    }
    cb.apply(null, arguments);
  });
}

PEODB.prototype.checkArgs = function(reqArgs, haveArgs) {
  for (var i = 0; i < reqArgs.length; i++) {
    var reqArg = reqArgs[i];
    if (typeof(haveArgs[reqArg]) === 'undefined') {
      return reqArg;
    }
  }
  return null;
}

PEODB.prototype.logAction = function() {} // FIXME - required for all edits

//============================================================================//
//
//  Load new functions into PEODB.prototype - and check for duplicates
//

function loadLibFunctions(filePath) {
  var tmpObj = {};
  tmpObj.prototype = {};
  require(libDir + file)(tmpObj);
  for (var key in tmpObj.prototype) {
    if (key in PEODB.prototype) {
      var baseName = filePath.replace(/^.*\/([^\/]*)$/, '$1');
      throw Error('PEODB.prototype.' + key + '() duplicated in ' + baseName);
    } else {
      PEODB.prototype[key] = tmpObj.prototype[key];
    }
  }
}

if (true) { // FIXME - be explicit once it's closer to finished, see below
  var fs = require('fs');
  var libDir = __dirname + '/lib/';
  var files = fs.readdirSync(libDir);
  files.sort();
  for (var i = 0; i < files.length; i++) {
    var file = files[i];
    if (file[0] !== '.') {
      if (file.match(/\.js$/)) {
        loadLibFunctions(libDir + file);
      }
    }
  }
}
else {
  require('./lib/checkLogin.js')    (PEODB);
  require('./lib/checkRoles.js')    (PEODB);
  require('./lib/simpleGets.js')    (PEODB);
  require('./lib/addPart.js')       (PEODB);
  require('./lib/addStep.js')       (PEODB);
  require('./lib/addPartOutput.js') (PEODB);
  require('./lib/addStepOutput.js') (PEODB);
}

//============================================================================//
