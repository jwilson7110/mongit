//============================================================================//

var print = console.log;

var crypto = require('crypto');

//============================================================================//

module.exports = function(PEODB) {

  var requiredArgs = [
    'user_id',
    'object_id',
    'name',
    'orig_name',
    'data',
    'type_abbr',
  ];

  //==========================================================================//

  PEODB.prototype.addBlob = function(args, cb) {
    var peodb = this;

    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing required argument: ' + missingArg));
    }

    peodb.dbSession(args, function(db, cb) {
      addBlob(db, args, cb);
    }, cb);
  }

  //==========================================================================//

  function findNextVersion(db, args, cb) {
    var qStr =
      'SELECT MAX(b.version)'
    + ' FROM blobs b'
    + ' JOIN blob_types bt ON (bt.blob_type_id = b.blob_type_id)'
    + ' WHERE b.name = '      + db.escape(args.name)
    + '   AND b.object_id = ' + db.escape(args.object_id)
    + '   AND bt.abbr = '     + db.escape(args.type_abbr)
    ;
    db.queryData(qStr, function(err, data) {
      if (err) {
        cb(err);
      }
      var version = 1;
      if (data.rows.length > 0) {
        version = data.rows[0][0] + 1;
      }
      return cb(null, version);
    });
  }

  //==========================================================================//

  function setInactive(db, args, cb) {
    var qStr =
      'UPDATE blobs      b'
    + ' JOIN  blob_types bt ON (bt.blob_type_id = b.blob_type_id)'
    + ' SET   active = FALSE'
    + ' WHERE b.name = '      + db.escape(args.name)
    + '   AND b.object_id = ' + db.escape(args.object_id)
    + '   AND bt.abbr = '     + db.escape(args.type_abbr)
    ;
    db.queryData(qStr, cb);
  }

  //==========================================================================//

  function addBlob(db, args, cb) {
    db.transaction(function(cb) {

      findNextVersion(db, args, function(err, version) {
        if (err) {
          return cb(err);
        }

        setInactive(db, args, function(err) {
          if (err) {
            return cb(err);
          }

          var blob_type_data =
            '(SELECT blob_type_id FROM blob_types WHERE abbr = '
            + db.escape(args.type_abbr) + ')';

          var qStr =
            'INSERT INTO blobs ('
          + '  create_time'
          + ', blob_type_id, object_id, user_id'
          + ', version, name, orig_name'
          + ', data, data_encoding, length, mimetype'
          + ') VALUES ('
          + '  UNIX_TIMESTAMP()'
          + ',' + blob_type_data
          + ',' + db.escape(args.object_id)
          + ',' + db.escape(args.user_id)
          + ',' + db.escape(version)
          + ',' + db.escape(args.name)
          + ',' + db.escape(args.orig_name)
          + ',' + db.escape(args.data.toString('base64'))
          + ',' + db.escape('base64')
          + ',' + db.escape(args.data.length)
          + ',' + db.escape(args.mimetype || null)
          + ')'
          ;
          db.queryData(qStr, function(err, data) {
            if (err) {
              return cb(err);
            }

            var blob_id = data.insertId;

            // FIXME - use a better eTag algorithm (different ids on peo1/peo2)
            var etag = blob_id + '_' + args.data.length + '_' + version;
            var qStr =
              'UPDATE blobs'
            + ' SET etag = ' + db.escape(etag)
            + ' WHERE blob_id = ' + db.escape(blob_id)
            ;
            db.queryData(qStr, function(err) {
              if (err) {
                return cb(err);
              }
              return cb(null, {
                blob_id: blob_id,
                version: version,
              });
            });
          });
        });
      });
    },
    cb);
  }
}

//============================================================================//
