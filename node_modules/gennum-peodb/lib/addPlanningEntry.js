//============================================================================//

var print = console.log;

//============================================================================//

module.exports = function(PEODB) {

  var requiredArgs = [
    'user_id',
    'entry_type', // 'BUDGET', 'PLAN', or 'ACTUAL'
    'year',
    'week',
    'value',
    'sql_table', // filled-in by this file
    'sql_field', // filled-in by this file
  ];

  var validEntryTypes = {
    'BUDGET' : true,
    'PLAN'   : true,
    'ACTUAL' : true,
  };

  function addPlanningEntry(peodb, args, cb) {
    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing required argument: ' + missingArg));
    }
    else if (typeof(args[args.sql_field]) === 'undefined') {
      return cb(Error('missing required argument: ' + args.sql_field));
    }

    if (!validEntryTypes[args.entry_type]) {
      return cb(Error('invalid "entry_type": ' + args.entry_type));
    }

    peodb.dbSession(args, function(db, cb) {
      addEntry(db, args, cb);
    }, cb);
  }

  function addEntry(db, args, cb) {
    db.transaction(function(cb) {
      // allow the addition of NULL entries
      var active = 'TRUE';
      var value = args.value;
      if ((value === null) || (value === false)) {
        value = 'NULL';
        active = 'FALSE';
      } else {
        value = db.escape(value);
      }

      var sql_field = args.sql_field;
      var deactivateStr =
        'UPDATE ' + args.sql_table + ' SET active = FALSE'
        + ' WHERE ' + sql_field + ' = ' + db.escape(args[sql_field])
        + '   AND entry_type = ' + db.escape(args.entry_type)
        + '   AND year = '       + db.escape(args.year)
        + '   AND week = '       + db.escape(args.week)
        ;

      var insertStr =
        'INSERT INTO ' + args.sql_table + ' ('
        + '  user_id, create_time, entry_type, active, year, week, '
        + sql_field + ', value'
        + ') VALUES ('
        +       db.escape(args.user_id)
        + ', UNIX_TIMESTAMP()'
        + ',' + db.escape(args.entry_type)
        + ',' + active
        + ',' + db.escape(args.year)
        + ',' + db.escape(args.week)
        + ',' + db.escape(args[sql_field])
        + ',' + value
        + ')'
        ;

      db.queryData(deactivateStr, function(err, data) {
        if (err) {
          return cb(err);
        }
        db.queryData(insertStr, function(err, data) {
          if (err) {
            return cb(err);
          }
          return cb(null, data.insertId);
        });
      });
    },
    cb);
  }

  //==========================================================================//

  function isPartType(db, part_id, abbr, cb) {
    var qStr =
      'SELECT part_id'
    + '  FROM parts p'
    + '    JOIN part_types pt ON (pt.part_type_id = p.part_type_id)'
    + '  WHERE p.part_id = ' + db.escape(part_id)
    + '    AND pt.abbr = ' + db.escape(abbr);
    db.queryData(qStr, function(err, data) {
      return cb(err, data.rows.length === 1);
    })
  }

  //==========================================================================//

  // Special case, need to verify that the part is the right type
  PEODB.prototype.addPartD0Entry = function(args, cb) {
    var peodb = this;
    // FIXME - different roles for different entry types (BUDGET/PLAN/ACTUAL) ?
    peodb.checkPartRole(args, ['PE', 'FabE' ], function(err) {
      if (err) {
        return cb(err);
      }
      if (typeof(args.part_id) === 'undefined') {
        return cb(Error('missing required argument: ' + args.sql_field));
      }
      isPartType(peodb.sharedDB, args.part_id, 'WT', function(err, isDie) {
        if (err) {
          return cb(err);
        }
        if (!isDie) {
          return cb(Error('D0 part entries must be attached to DIE'));
        }
        args.sql_table = 'plan_d0_die_entries';
        args.sql_field = 'part_id';
        return addPlanningEntry(peodb, args, cb);
      });
    });
  }

  PEODB.prototype.addFabProcessD0Entry = function(args, cb) {
    var peodb = this;
    peodb.checkFabProcessRole(args, [ 'PE', 'FabE' ], function(err) {
      if (err) { return cb(err); }
      args.sql_table = 'plan_d0_process_entries';
      args.sql_field = 'fab_process_id';
      return addPlanningEntry(peodb, args, cb);
    });
  }

  PEODB.prototype.addPartYieldEntry = function(args, cb) {
    var peodb = this;
    peodb.checkPartRole(args, 'PE', function(err) {
      if (err) { return cb(err); }
      args.sql_table = 'plan_part_yield_entries';
      args.sql_field = 'part_id';
      return addPlanningEntry(peodb, args, cb);
    });
  }

  PEODB.prototype.addTestTimeEntry = function(args, cb) {
    var peodb = this;
    peodb.checkTPRole(args, 'TE', function(err) {
      if (err) { return cb(err); }
      args.sql_table = 'plan_test_time_entries';
      args.sql_field = 'tp_id';
      return addPlanningEntry(peodb, args, cb);
    });
  }

  PEODB.prototype.addGenericPlanningEntry = function(args, cb) {
    var peodb = this;
    args.sql_table = 'plan_generic_entries';
    args.sql_field = 'item_name';
    return addPlanningEntry(peodb, args, cb);
  }

  //==========================================================================//
}

//============================================================================//
