//============================================================================//

var print = console.log;

var peodbUtils = require('../peodbUtils');

//============================================================================//

module.exports = function(PEODB) {

  var requiredArgs = [
    'user_id',
    'step_type_id',
    'input_part_ids',
    'output_part_ids',
  ];

  PEODB.prototype.addStepLinked = function(args, cb) {
    var peodb = this;

    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing required argument: ' + missingArg));
    }

    if (args.input_part_ids === false) {
      args.input_part_ids = [];
    }
    if (!(args.input_part_ids instanceof Array)) {
      return cb(Error('invalid input_part_ids'));
    }

    if (args.output_part_ids === false) {
      args.output_part_ids = [];
    }
    if (!(args.output_part_ids instanceof Array)) {
      return cb(Error('invalid output_part_ids'));
    }

    peodb.checkPartflowRole(args, 'PE', function(err) {
      if (err) {
        return cb(err);
      }
      peodb.dbSession(args, function(db, cb) {
        addStepLinked(db, args, cb);
      }, cb);
    });
  }

  function addStepLinked(db, args, cb) {
    db.transaction(function(cb) {
      peodbUtils.createObject(db, 'step', args.user_id, function(err, object_id) {
        var qStr = [
          'INSERT INTO steps (',
          '  step_id, object_id, step_type_id, state',
          ') VALUES (',
          '  NULL',
          ',' + db.escape(object_id),
          ',' + db.escape(args.step_type_id),
          ',"ACTIVE")',
        ].join('\n');

        db.queryData(qStr, function(err, data) {
          if (err) {
            return cb(err);
          }

          var step_id = data.insertId;

          addPartOutputs(db, step_id, args.input_part_ids, function(err) {
            if (err) {
              return cb(err);
            }
            addStepOutputs(db, step_id, args.output_part_ids, function(err) {
              if (err) {
                return cb(err);
              }
              return cb(null, step_id);
            });
          });
        });
      });
    },
    cb);
  }

  function addPartOutputs(db, step_id, input_part_ids, cb) {
    if (input_part_ids.length <= 0) {
      return cb();
    }
    step_id = db.escape(step_id);
    qStr = 'INSERT INTO part_outputs'
         + ' (part_output_id, step_id, part_id, count) VALUES ';
    for (var i = 0; i < input_part_ids.length; i++) {
      var part_id = db.escape(input_part_ids[i]);
      if (i != 0) {
        qStr += ',';
      }
      qStr +=  '(NULL,' + step_id + ',' + part_id + ',1)';
    }
    db.queryData(qStr, function(err, data) {
      return cb(err);
    });
  }

  function addStepOutputs(db, step_id, output_part_ids, cb) {
    if (output_part_ids.length <= 0) {
      return cb();
    }
    step_id = db.escape(step_id);
    qStr = 'INSERT INTO step_outputs'
         + ' (step_output_id, step_id, part_id, count) VALUES ';
    for (var i = 0; i < output_part_ids.length; i++) {
      var part_id = db.escape(output_part_ids[i]);
      if (i != 0) {
        qStr += ',';
      }
      qStr +=  '(NULL,' + step_id + ',' + part_id + ',1)';
    }
    db.queryData(qStr, function(err, data) {
      return cb(err);
    });
  }
}

//============================================================================//
