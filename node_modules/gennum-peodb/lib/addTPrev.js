//============================================================================//

var async = require('async');

var peodbUtils = require('../peodbUtils');

//============================================================================//

var print = console.log;

//============================================================================//

module.exports = function(PEODB) {

  var requiredArgs = [
    'user_id',
    'tp_id',
    'name',
    'svn_url',
    'hardbins',
    'softbins',
    'testflags',
    // 'rc_tp_rev_id', // the Release Candidate revision source
  ];

  PEODB.prototype.addTPrev = function(args, cb) {
    var peodb = this;

    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing required argument: ' + missingArg));
    }

    var revRC = findRevAndRC(args.name);
    if (typeof(revRC) === 'string') {
      return cb(Error(revRC));
    }
    args.rev = revRC.rev;
    args.rc  = revRC.rc;

    // make sure that the `rc_tp_rev_id` field is never 'undefined'
    if (typeof(args.rc_tp_rev_id) === 'undefined') {
      args.rc_tp_rev_id = null;
    }
    args.is_rel_rev = (typeof(args.rc_tp_rev_id) === 'number');

    peodb.checkTPRole(args, 'TE', function(err) {
      if (err) {
        return cb(err);
      }
      peodb.dbSession(args,
        function(db, cb) {
          addTPrev(peodb, db, args, cb);
        },
        function(err, tp_rev_id) {
          if (!err) {
            peodb.triggerEmails();
          }
          return cb(err, tp_rev_id);
        }
      );
    });
  }
}

//============================================================================//

function findRevAndRC(name) {
  var words = name.split('_');
  if (words.length !== 4) {
    return 'invalid tp_rev name';
  }

  var revRC = words[3];
  var matches = revRC.match(/^rev(\d{3})(.*)$/);
  if (!matches) {
    return 'invalid tp_rev revision';
  }
  var rev = matches[1];
  var rc  = matches[2];

  if (rc === '') {
    rc = null;
  }
  else {
    var matches = rc.match(/^rc(\d{2})$/);
    if (!matches) {
      return 'invalid tp_rev revisions rc';
    }
    rc = matches[1]; // strip the 'rc'
  }

  return {
    rev: rev,
    rc:  rc,
  };
}

//============================================================================//

function addTPrev(peodb, db, args, cb) {
  db.transaction(function(cb) {

    findPartflowID(db, args, function(err, partflow_id) {
      if (err) {
        return cb(err);
      }

      peodbUtils.createStep(db, 'TR', args.user_id, function(err, step_id) {
        if (err) {
          return cb(err);
        }

        getTPInfo(db, args.tp_id, function(err, tpInfo) {
          if (err) {
            return cb(err);
          }

          var state = 'DRAFT';
          if (args.rc_tp_rev_id !== null) {
            if (tpInfo.req_trial_run) {
              state = 'TRIAL_RUN';
            } else {
              state = 'RELEASED';
            }
          }

          var qStr =
            'INSERT INTO tp_revs ('
          + '  tp_rev_id, tp_id, step_id, is_rel_rev, rc_tp_rev_id'
          + ', name, rev, rc, svn_url, trial_run_required'
          + ', create_user_id, create_time, state'
          + ') VALUES ('
          + 'NULL'
          + ',' + db.escape(args.tp_id)
          + ',' + db.escape(step_id)
          + ',' + db.escape(args.is_rel_rev)
          + ',' + db.escape(args.rc_tp_rev_id)
          + ',' + db.escape(args.name)
          + ',' + db.escape(args.rev)
          + ',' + db.escape(args.rc)
          + ',' + db.escape(args.svn_url)
          + ',' + db.escape(tpInfo.req_trial_run)
          + ',' + db.escape(args.user_id)
          + ',UNIX_TIMESTAMP()'
          + ',' + db.escape(state)
          + ')'
          ;
          db.queryData(qStr, function(err, data) {
            if (err) {
              return cb(err);
            }

            var tp_rev_id = data.insertId;

            var qStr =
              'INSERT INTO partflow_steps'
            + ' (partflow_id, step_id)'
            + ' VALUES (' + partflow_id + ',' + step_id + ')'
            ;
            db.queryData(qStr, function(err, data) {
              if (err) {
                return cb(err);
              }

              addExtras(peodb, db, args, tpInfo, tp_rev_id,
                function(err) {
                  if (err) {
                    return cb(err);
                  }
                  return cb(null, tp_rev_id);
                }
              );
            });
          });
        });
      });
    });
  },
  cb);
}

//==========================================================================//

function findPartflowID(db, args, cb) {
  var qStr =
    'SELECT'
  + '    ts.partflow_id'
  + '  FROM'
  + '    tp_sets  ts'
  + '    JOIN tps tp  ON (ts.tp_set_id = tp.tp_set_id)'
  + '  WHERE'
  + '    tp.tp_id = ' + db.escape(args.tp_id)
  ;
  db.queryData(qStr, function(err, data) {
    if (err) {
      return cb(err);
    }
    if (data.rows.length !== 1) {
      return cb(Error('TPset could not be found for the TP'));
    }
    return cb(null, data.rows[0][0]);
  });
}

//==========================================================================//

function getTPInfo(db, tp_id, cb) {
  var qStr =
    'SELECT'
  + '  tp.name  AS tp_name'
  + ', sg.stage AS tp_stage'
  + ', sg.abbr  AS tp_stage_abbr'
  + ', tt.abbr  AS tp_type_abbr'
  + ', tt.req_trial_run'
  + ' FROM tps       tp'
  + ' JOIN tp_types  tt ON (tt.tp_type_id = tp.tp_type_id)'
  + ' JOIN tp_sets   ts ON (ts.tp_set_id = tp.tp_set_id)'
  + ' JOIN tp_stages sg ON (sg.tp_stage_id = ts.tp_stage_id)'
  + ' WHERE tp.tp_id = ' + db.escape(tp_id)
  ;
  db.query1Row(qStr, cb);
}

//==========================================================================//
//
//  addExtras()
//
//  - copy the TP roles
//  - add the hardbins
//  - add the softbins
//  - add the testflags

function addExtras(peodb, db, args, tpInfo, tp_rev_id, cb) {

  copyRoles(peodb, db, args, tp_rev_id, function(err) {
    if (err) {
      return cb(err);
    }

    var binArgs = { db: db,
      tp_rev_id: tp_rev_id,
      hardbins:  args.hardbins,
      softbins:  args.softbins,
    }
    peodb.addTPrevBins(binArgs, function(err) {
      if (err) {
        return cb(err);
      }

      var flagArgs = { db: db,
        tp_rev_id: tp_rev_id,
        testflags: args.testflags,
      }
      peodb.addTPrevFlags(flagArgs, function(err) {
        if (err) {
          return cb(err);
        }

        var auditArgs = { db: db,
          tp_rev_id: tp_rev_id,
        }
        peodb.addTPrevAudits(auditArgs, function(err) {
          if (err) {
            return cb(err);
          }

          setupHoldLimits(db, args, tpInfo, tp_rev_id, function(err) {
            if (err) {
              return cb(err);
            }

            if (args.rc_tp_rev_id === null) {
              // do not copyRCData()
              return cb(null, tp_rev_id);
            }

            copyRCData(db, tp_rev_id, function(err) {
              if (err) {
                return cb(err);
              }
              return cb(null, tp_rev_id);
            });
          });
        });
      });
    });
  });
}

//============================================================================//

function copyRoles(peodb, db, args, tp_rev_id, cb) {
  var copyArgs = {
    db:      db,
    user_id: args.user_id,
  };
  
  if (args.rc_tp_rev_id === null) { // a release candidate revision
    copyArgs.tp_id     = args.tp_id;
    copyArgs.tp_rev_id = tp_rev_id;
    peodb.copyRolesTP2TPrev(copyArgs, cb);
  }
  else { // a release revision
    copyArgs.src_tp_rev_id = args.rc_tp_rev_id;
    copyArgs.dst_tp_rev_id = tp_rev_id;
    peodb.copyRolesTPrev2TPrev(copyArgs, cb);
  }
}

//============================================================================//

function setupHoldLimits(db, args, tpInfo, tp_rev_id, cb) {
  if (args.rc_tp_rev_id !== null) {
    // this is a release rev, the hold limits will be copied instead
    return cb(null, tp_rev_id);
  }

  var holdType; // 'min' | 'max'
  var holdValue; // 100  | 99.9
  switch (tpInfo.tp_type_abbr) {
    case 'P':
    case 'X': {
      holdType = 'max';
      holdValue = 100.0;
      break;
    }
    case 'Q': {
      holdType = 'min';
      holdValue = 99.9;
      break;
    }
  }
  if (!holdType) {
    return cb();
  }

  var qStr =
    'UPDATE hardbins'
  + ' SET hold_' + holdType + '_percent = ' + db.escape(holdValue)
  + ' WHERE tp_rev_id = ' + db.escape(tp_rev_id)
  + '   AND good_bin = TRUE'
  ;
  db.queryData(qStr, cb);
}

//============================================================================//
//============================================================================//

function copyRCData(db, tp_rev_id, cb) {
  var tp_rev_id = db.escape(tp_rev_id);
  async.series([
    function(cb) { copySpecifics  (db, tp_rev_id, cb); },
    function(cb) { copyInputParts (db, tp_rev_id, cb); },
    function(cb) { copyHardbins   (db, tp_rev_id, cb); },
    function(cb) { copyTestHouses (db, tp_rev_id, cb); },
  ],
  cb);
}

//============================================================================//

function copySpecifics(db, tp_rev_id, cb) {
  var qStr =
    'UPDATE tp_revs dst'
  + ' JOIN  tp_revs src ON (dst.rc_tp_rev_id = src.tp_rev_id)'
  + ' SET dst.ate_sw_version_id      = src.ate_sw_version_id'
  +    ', dst.ate_os_version_id      = src.ate_os_version_id'
  +    ', dst.site_count             = src.site_count'
  +    ', dst.vector_size            = src.vector_size'
  +    ', dst.disk_space             = src.disk_space'
  +    ', dst.reason                 = src.reason'
  +    ', dst.comments               = src.comments'
  +    ', dst.special_hw             = src.special_hw'
  +    ', dst.special_instrs         = src.special_instrs'
  +    ', dst.temperature            = src.temperature'
  + ' WHERE dst.tp_rev_id = ' + tp_rev_id
  db.queryData(qStr, cb);
}

function copyInputParts(db, tp_rev_id, cb) {
  var qStr =
    'INSERT INTO part_outputs (step_id, part_id, state)'
  + ' SELECT dst.step_id, po.part_id, "ACTIVE"'
  + ' FROM tp_revs     src'
  + ' JOIN tp_revs     dst ON (dst.rc_tp_rev_id = src.tp_rev_id)'
  + ' JOIN part_outputs po ON (po.step_id = src.step_id)'
  + ' WHERE dst.tp_rev_id = ' + tp_rev_id
  ;
  db.queryData(qStr, cb);
}

function copyHardbins(db, tp_rev_id, cb) {
  var qStr =
    'INSERT INTO step_outputs (step_id, part_id, state)'
  + ' SELECT dst.step_id, so.part_id, "ACTIVE"'
  + ' FROM tp_revs     src'
  + ' JOIN tp_revs     dst ON (dst.rc_tp_rev_id = src.tp_rev_id)'
  + ' JOIN step_outputs so ON (so.step_id = src.step_id)'
  + ' WHERE dst.tp_rev_id = ' + tp_rev_id
  ;
  db.queryData(qStr, function(err) {
    if (err) {
      return cb(err);
    }
    var qStr =
      'UPDATE tp_revs  src'
    + ' JOIN  tp_revs  dst    ON (dst.rc_tp_rev_id = src.tp_rev_id)'
    + ' JOIN  hardbins src_hb ON (src_hb.tp_rev_id = src.tp_rev_id)'
    + ' JOIN  hardbins dst_hb ON (dst_hb.tp_rev_id = dst.tp_rev_id'
    + '                       AND dst_hb.hbin_num = src_hb.hbin_num)'
    + ' JOIN  step_outputs src_so ON (src_so.step_output_id = src_hb.step_output_id)'
    + ' JOIN  step_outputs dst_so ON (dst_so.step_id = dst.step_id'
    + '                           AND dst_so.part_id = src_so.part_id)'
    + ' SET dst_hb.step_output_id = dst_so.step_output_id'
    + '   , dst_hb.hold_min_percent = src_hb.hold_min_percent'
    + '   , dst_hb.hold_max_percent = src_hb.hold_max_percent'
    + ' WHERE dst.tp_rev_id = ' + tp_rev_id
    ;
    db.queryData(qStr, cb);
  });
}

function copyTestHouses(db, tp_rev_id, cb) {
  var qStr =
    'INSERT INTO step_companies (step_id, company_id)'
  + ' SELECT dst.step_id, sc.company_id'
  + ' FROM tp_revs       src'
  + ' JOIN tp_revs       dst ON (dst.rc_tp_rev_id = src.tp_rev_id)'
  + ' JOIN step_companies sc ON (sc.step_id = src.step_id)'
  + ' WHERE dst.tp_rev_id = ' + tp_rev_id
  ;
  db.queryData(qStr, cb);
}

//============================================================================//
//============================================================================//
