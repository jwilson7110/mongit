//============================================================================//

var print = console.log;

var async = require('async');

//============================================================================//

module.exports = function(PEODB) {

  var requiredArgs = [
    'db',
    'tp_rev_id',
  ];

  PEODB.prototype.addTPrevAudits = function(args, cb) {
    var peodb = this;

    if (!(args instanceof Object)) {
      args = { tp_rev_id: args };
    }

    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing required argument: ' + missingArg));
    }

    var db = args.db;

    getPRUroleID(db, function(err, robot_role_id) {
      if (err) {
        return cb(err);
      }
      args.robot_role_id = robot_role_id;
      addTPrevAudits(db, args, cb);
    });
  }
}

function getPRUroleID(db, cb) {
  var qStr = 'SELECT role_type_id FROM role_types WHERE brief = "PRU"';
  db.query1Value(qStr, cb);
}

//============================================================================//
//============================================================================//

function addTPrevAudits(db, args, cb) {
  getInfo(db, args, function(err, info) {
    if (err) {
      return cb(err);
    }

    var tpRevInfo      = info.tpRevInfo.toMap();
    var roleTypes      = info.roleTypes.toMapMaps('role_type_id');
    var auditTypes     = info.auditTypes;
    var auditRoleTypes = info.auditRoleTypes.collateArrays('audit_type_id');

    function regexpFail(regexpStr, abbr) {
      if (typeof(regexpStr) !== 'string') {
        return false; // no regexp, no problem
      }
      var regexp = new RegExp(regexpStr);
      return !regexp.test(abbr);
    }

    async.forEachSeries(info.auditTypes.rows,
      function(auditType, cb) {
        if (regexpFail(auditType.tp_type_regexp,  tpRevInfo.tp_type_abbr)  ||
            regexpFail(auditType.tp_stage_regexp, tpRevInfo.tp_stage_abbr) ||
            regexpFail(auditType.ate_type_regexp, tpRevInfo.ate_type_abbr)) {
          return cb(); // not required
        }

        var tp_rev_id     = tpRevInfo.tp_rev_id;
        var audit_type_id = auditType.audit_type_id;

        insertAudit(db, tp_rev_id, audit_type_id, function(err, audit_id) {
          if (err) {
            return cb(err);
          }

          var roleRows = auditRoleTypes[audit_type_id];
          if (!roleRows) {
            roleRows = [ { role_type_id: args.robot_role_id } ];
          }

          async.forEachSeries(roleRows,
            function(roleRow, cb) {
              insertSignoff(db, audit_id, roleRow.role_type_id, cb);
            },
          cb);
        });
      },
    cb);
  });
}

//============================================================================//

function insertAudit(db, tp_rev_id, audit_type_id, cb) {
  var qStr =
    'INSERT INTO audits (tp_rev_id, audit_type_id)'
  + ' VALUES '
  + '(' + db.escape(tp_rev_id)
  + ',' + db.escape(audit_type_id)
  + ')'
  ;
  db.queryData(qStr, function(err, data) {
    if (err) {
      return cb(err);
    }
    return cb(null, data.insertId);
  });
}

function insertSignoff(db, audit_id, role_type_id,  cb) {
  var qStr =
    'INSERT INTO signoffs (role_type_id)'
  + ' VALUES (' + db.escape(role_type_id) + ')'
  ;
  db.queryData(qStr, function(err, data) {
    if (err) {
      return cb(err);
    }

    var signoff_id = data.insertId;

    var qStr = 'INSERT INTO audit_signoffs (audit_id, signoff_id)'
    + ' VALUES '
    + '(' + db.escape(audit_id)
    + ',' + db.escape(signoff_id)
    + ')'
    ;
    db.queryData(qStr, function(err, data) {
      if (err) {
        return cb(err);
      }
      return cb(null, data.insertId);
    });
  });
}

//============================================================================//
//============================================================================//

function getInfo(db, args, cb) {
  async.parallel({
    tpRevInfo:      function(cb) { getTPrevInfo(db, args.tp_rev_id, cb); },
    roleTypes:      function(cb) { getRoleTypes      (db, cb); },
    auditTypes:     function(cb) { getAuditTypes     (db, cb); },
    auditRoleTypes: function(cb) { getAuditRoleTypes (db, cb); },
  },
  cb);
}

function getRoleTypes(db, cb) {
  db.queryData('SELECT * FROM role_types', cb);
}
function getAuditTypes(db, cb) {
  db.queryData('SELECT * FROM audit_types', cb);
}
function getAuditRoleTypes(db, cb) {
  db.queryData('SELECT * FROM audit_role_types', cb);
}

function getTPrevInfo(db, tp_rev_id, cb) {
  var qStr =
    'SELECT'
  + '   tr.tp_rev_id'
  + ' , tr.name'
  + ' , tps.tp_stage_id, tps.abbr AS tp_stage_abbr'
  + ' , tpt.tp_type_id,  tpt.abbr AS tp_type_abbr'
  + ' , ate.ate_type_id, ate.abbr AS ate_type_abbr'
  + ' FROM tp_revs   tr'
  + ' JOIN tps       tp   ON (tp.tp_id        = tr.tp_id)'
  + ' JOIN tp_sets   ts   ON (ts.tp_set_id    = tp.tp_set_id)'
  + ' JOIN tp_stages tps  ON (tps.tp_stage_id = ts.tp_stage_id)'
  + ' JOIN tp_types  tpt  ON (tpt.tp_type_id  = tp.tp_type_id)'
  + ' JOIN ate_types ate  ON (ate.ate_type_id = tp.ate_type_id)'
  + ' WHERE tp_rev_id = ' + db.escape(tp_rev_id)
  ;
  db.query1Row(qStr, function(err, row) {
    if (err) {
      return cb(err);
    }
    return cb(null, row);
  });
}

//============================================================================//
//============================================================================//


