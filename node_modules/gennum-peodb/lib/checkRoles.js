//============================================================================//

var print = console.log;

//============================================================================//

module.exports = function(PEODB) {

  //  NOTES:
  //
  //  - the call pattern is  checkFunc({}, 'ROLE', cb)
  //                     or  checkFunc({}, [ 'ROLE1', 'ROLE2' ], cb)
  //  - the required `args` fields depend on the call.
  //  - all calls require the `user_id` field

  //==========================================================================//

  function checkAdmin(db, user_id, cb) {
    return cb(null, false); // FIXME - checkAdmin() - use super-user accounts instead
    var qStr =
      'SELECT 1'
    + ' FROM user_role_types ur'
    + ' JOIN role_types rt ON (rt.role_type_id = ur.role_type_id)'
    + ' WHERE ur.user_id = ' + db.escape(user_id)
    + '   AND rt.brief = "Admin"'
    ;
    db.queryData(qStr, function(err, data) {
      return cb(err, data && data.rows.length >= 1);
    });
  }

  function roleExpression(db, role) {
    if (typeof(role) === 'string') {
      return ' = ' + db.escape(role);
    }
    if (role instanceof Array) {
      var array = [];
      for (var i = 0; i < role.length; i++) {
        array.push(db.escape(role[i]));
      }
      return ' IN ('  + array.join(',') + ')';
    }
    return null;
  }

  function checkObjectRole(peodb, args, checkArgs, cb) {
    if (typeof(args.user_id) === 'undefined') {
      return cb(Error('missing required argument: user_id'));
    }

    if (args.user_id < 0) {
      return cb(); // system users are all powerful
    }

    var roles = checkArgs.role;
    if ((roles === '') || (roles === null) ||
        ((roles instanceof Array) && (roles.length <= 0))) {
      return cb(); // empty roles
    }

    var db = args.db || peodb.sharedDB;

    checkAdmin(db, args.user_id, function(err, isAdmin) {
      if (err) {
        return cb(err);
      }
      if (isAdmin) {
        return cb();
      }

      var qStr =
        'SELECT'
      + '  ro.user_id, ro.role_type_id'
      + ' FROM  object_roles ro'
      + '  JOIN role_types   rt ON (rt.role_type_id = ro.role_type_id)'
      + ' WHERE ro.object_id = ' + db.escape(checkArgs.object_id)
      + '   AND ro.user_id = '   + db.escape(args.user_id)
      + '   AND rt.brief '       + roleExpression(db, roles)
      ;
      db.queryData(qStr, function(err, data) {
        if (err) {
          return cb(err);
        }
        if (data.rows.length < 1) {
          var roleStr = roles;
          if (typeof(roleStr) !== 'string') {
            roleStr = role.join(' or ');
          }
          return cb(Error('No Permission - requires ' + roleStr));
        }
        return cb();
      });
    });
  }

  //==========================================================================//

  function isObject(x) {
    return (x instanceof Object);
  }

  //==========================================================================//

  PEODB.prototype.checkUserRole = function(args, role, cb) {
    return cb(); // FIXME
    var peodb = this;
    if (!isObject(args)) {
      return cb(Error('checkUserRole: bad arguments'));
    }
    var checkArgs = {
      table: 'user_role_types',
      field: null,
      objID: null,
      role:  role,
    };
    return checkRole(peodb, args, checkArgs, cb);
  }

  //==========================================================================//
  //
  //  role access (by object type)
  //

  var types = [
    { objFunc: 'getPartflowObjectID',   checkFunc: 'checkPartflowRole'   },
    { objFunc: 'getPartObjectID',       checkFunc: 'checkPartRole'       },
    { objFunc: 'getStepObjectID',       checkFunc: 'checkStepRole'       },
    { objFunc: 'getTPsetObjectID',      checkFunc: 'checkTPsetRole'      },
    { objFunc: 'getTPObjectID',         checkFunc: 'checkTPRole'         },
    { objFunc: 'getTPrevObjectID',      checkFunc: 'checkTPrevRole'      },
    { objFunc: 'getFabProcessObjectID', checkFunc: 'checkFabProcessRole' },
  ];

  function genRoleFunc(objFunc) {
    return function(args, role, cb) {
      var peodb = this;
      peodb[objFunc](args, function(err, object_id) {
        if (err) {
          return cb(err);
        }
        var checkArgs = {
          role:      role,
          object_id: object_id,
        };
        checkObjectRole(peodb, args, checkArgs, cb);
      });
    }
  }

  for (var i = 0; i < types.length; i++) {
    var type = types[i];
    PEODB.prototype[type.checkFunc] = genRoleFunc(type.objFunc);
  }

  //==========================================================================//
}

//============================================================================//
