//============================================================================//

var print = console.log;

var addRoleCopy = require('../addRoleChanges').addRoleCopy;

//============================================================================//

var async = require('async');

var peodbUtils = require('../peodbUtils');

var checkArgs = peodbUtils.checkArgs;

//============================================================================//

module.exports = function(PEODB) {

  //==========================================================================//

  function copyRoles(peodb, args, src_id, dst_id, cb) {
    var db = args.db;
    var depth = db.transactionDepth;
    if (!depth || (depth <= 0)) {
      return cb(Error('copyRoles() should be called within a transaction'));
    }

    src_id = db.escape(src_id);
    dst_id = db.escape(dst_id);

    var qStr =
      'SELECT object_id, user_id, role_type_id'
    + ' FROM  object_roles'
    + ' WHERE object_id = ' + src_id;
    db.queryData(qStr, function(err, srcRoles) {
      if (err) {
        return cb(err);
      }

      var qStr =
        'INSERT INTO object_roles (object_id, user_id, role_type_id)'
      + ' SELECT ' + dst_id + ', user_id, role_type_id'
      + '  FROM  object_roles'
      + '  WHERE object_id = ' + src_id
      ;
      db.queryData(qStr, function(err) {
        if (err) {
          return cb(err);
        }

        var inserted = [];
        var rows = srcRoles.rows;
        for (var r = 0; r < rows.length; r++) {
          inserted.push(rows[r].toMap());
        }
        addRoleCopy(db, src_id, dst_id, inserted, function(err) {
          return cb(err, { inserted: inserted, deleted: [] });
        });
      });
    });
  }

  //==========================================================================//

  PEODB.prototype.copyRolesPartflow2Part = function(args, cb) {
    var peodb = this;

    var requiredArgs = [ 'db', 'user_id', 'partflow_id', 'part_id' ];
    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing required argument: ' + missingArg));
    }

    async.parallel({
      src_id: function(cb) { peodb.getPartflowObjectID (args, cb); },
      dst_id: function(cb) { peodb.getPartObjectID     (args, cb); },
    },
    function(err, data) {
      if (err) {
        return cb(err);
      }
      return copyRoles(peodb, args, data.src_id, data.dst_id, cb);
    });
  }

  //==========================================================================//

  PEODB.prototype.copyRolesPartflow2Step = function(args, cb) {
    var peodb = this;

    var requiredArgs = [ 'db', 'user_id', 'partflow_id', 'step_id' ];
    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing required argument: ' + missingArg));
    }

    async.parallel({
      src_id: function(cb) { peodb.getPartflowObjectID (args, cb); },
      dst_id: function(cb) { peodb.getStepObjectID     (args, cb); },
    },
    function(err, data) {
      if (err) {
        return cb(err);
      }
      return copyRoles(peodb, args, data.src_id, data.dst_id, cb);
    });
  }

  //==========================================================================//

  PEODB.prototype.copyRolesTPset2TP = function(args, cb) {
    var peodb = this;

    var requiredArgs = [ 'db', 'user_id', 'tp_set_id', 'tp_id' ];
    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing required argument: ' + missingArg));
    }

    async.parallel({
      src_id: function(cb) { peodb.getTPsetObjectID (args, cb); },
      dst_id: function(cb) { peodb.getTPObjectID    (args, cb); },
    },
    function(err, data) {
      if (err) {
        return cb(err);
      }
      return copyRoles(peodb, args, data.src_id, data.dst_id, cb);
    });
  }

  //==========================================================================//

  PEODB.prototype.copyRolesTP2TPrev = function(args, cb) {
    var peodb = this;

    var requiredArgs = [ 'db', 'user_id', 'tp_id', 'tp_rev_id' ];
    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing required argument: ' + missingArg));
    }

    async.parallel({
      src_id: function(cb) { peodb.getTPObjectID    (args, cb); },
      dst_id: function(cb) { peodb.getTPrevObjectID (args, cb); },
    },
    function(err, data) {
      if (err) {
        return cb(err);
      }
      return copyRoles(peodb, args, data.src_id, data.dst_id, cb);
    });
  }

  //==========================================================================//

  PEODB.prototype.copyRolesTPrev2TPrev = function(args, cb) {
    var peodb = this;

    var requiredArgs = [ 'db', 'user_id', 'src_tp_rev_id', 'dst_tp_rev_id' ];
    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing required argument: ' + missingArg));
    }

    var db = args.db;

    async.parallel({
      src_id: function(cb) {
        peodbUtils.getTPrevObjectID(db, args.src_tp_rev_id, cb);
      },
      dst_id: function(cb) {
        peodbUtils.getTPrevObjectID(db, args.dst_tp_rev_id, cb);
      },
    },
    function(err, data) {
      if (err) {
        return cb(err);
      }
      return copyRoles(peodb, args, data.src_id, data.dst_id, cb);
    });
  }

  //==========================================================================//
}

//============================================================================//
