//============================================================================//

var print = console.log;

var addRoleEdit = require('../addRoleChanges').addRoleEdit;

//============================================================================//
//
//  editObjectRole({
//    assigner_id:  1324,
//    user_id:      98,
//    object_id:    4324,
//    role_type_id: 4,
//    action:       'set' | 'insert' | 'delete',
//    propagate:    true,
//  }, function(err, results) {
//    results = {
//      inserted: [
//        { object_id: oid1, user_id: uid1, role_type_id: rid1 },
//        { object_id: oid1, user_id: uid2, role_type_id: rid1 },
//        { object_id: oid2, user_id: uid2, role_type_id: rid2 },
//      ],
//      deleted: [
//        { object_id: oid1, user_id: uid1, role_type_id: rid3 },
//        { object_id: oid1, user_id: uid2, role_type_id: rid3 },
//        { object_id: oid2, user_id: uid2, role_type_id: rid4 },
//      ],
//    };
//  });
//
//============================================================================//

var async = require('async');

var peodbUtils = require('../peodbUtils');

var checkArgs = peodbUtils.checkArgs;

//============================================================================//

var propagating = {}; // a unique object - the contents are not used

//============================================================================//

var requiredArgs = [
  'assigner_id',    // user_id that is making the assignment
  'target_user_id', // user_id that is being assigned the role
  'role_type_id',
];

//============================================================================//
//============================================================================//

module.exports = function(PEODB) {

  //==========================================================================//

  function debugRole(peodb, db, args, object_id, cb) { // FIXME
    if (1 > 0) {
      return cb();
    }
    peodb.findObjectSource(object_id, function(err, objSource) {
      if (err) { print(err); return cb(); }
      db.queryData('SELECT name, user_id FROM users', function(err, data) {
        if (err) { print(err); return cb(); }
        var users = data.toMapArrays('user_id');
        print('* debugRole', args);
        print('  assigner', users[args.assigner_id].name);
        print('  userName', users[args.target_user_id].name);
        print('  roleBrief', args.roleBrief);
        print('  objSource', objSource);
        return cb();
      });
    });
  }

  function editRole(peodb, args, action, type, cb) {
    var missingArg = checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing argument: ' + missingArg));
    }
    peodb.dbSession(args, function(db, cb) {
      db.transaction(
        function(cb) {
          peodb.getObjectID(args, type, function(err, object_id) {
            if (err) { return cb(err); }

            db.queryData('SELECT * FROM role_types', function(err, data) {
              if (err) { return cb(err); }

              var roleTypes = data.toMapArrays('role_type_id');

              args = {
                assigner_id:    parseInt(args.assigner_id),
                target_user_id: parseInt(args.target_user_id),
                role_type_id:   parseInt(args.role_type_id),
                propagate:      !!args.propagate,
                db:        db,
                action:    action,
                roleTypes: roleTypes,
                roleInfo:  roleTypes[args.role_type_id],
                roleBrief: roleTypes[args.role_type_id].brief,
                results:   { inserted: [], deleted:  [] },
              };

              args.isWatcher = isWatcherRole(args);
              args.isSuper   = isSuperUser(args);

              debugRole(peodb, db, args, object_id, function() {
                editObjectRole(db, args, object_id, function(err) {
                  if (err) {
                    return cb(err);
                  }
                  addRoleEdit(db, args, object_id, function(err) {
                    return cb(err, args.results);
                  });
                });
              });
            });
          });
        },
      cb); // transaction()
    },
    function(err, results) { // dbSession() finalizer
      if (!err) {
        peodb.triggerEmails();
      }
      return cb(err, results);
    });
  }

  //==========================================================================//

  // the raw form
  PEODB.prototype.editRole = function(args, action, type, cb) {
    editRole(this, args, action, type, function(err, results) {
      if (err) {
        return cb(err);
      }
      return cb(null, results);
    });
  }

  // SETs
  PEODB.prototype.setPartflowRole = function(args, cb) {
    editRole(this, args, 'set', 'partflow', cb);
  }
  PEODB.prototype.setPartRole = function(args, cb) {
    editRole(this, args, 'set', 'part', cb);
  }
  PEODB.prototype.setStepRole = function(args, cb) {
    editRole(this, args, 'set', 'step', cb);
  }
  PEODB.prototype.setTPsetRole = function(args, cb) {
    editRole(this, args, 'set', 'tp_set', cb);
  }
  PEODB.prototype.setTPRole = function(args, cb) {
    editRole(this, args, 'set', 'tp', cb);
  }
  PEODB.prototype.setTPrevRole = function(args, cb) {
    editRole(this, args, 'set', 'tp_rev', cb);
  }
  PEODB.prototype.setFabProcessRole = function(args, cb) {
    editRole(this, args, 'set', 'fab_process', cb);
  }

  // ADDs
  PEODB.prototype.addPartflowRole = function(args, cb) {
    editRole(this, args, 'insert', 'partflow', cb);
  }
  PEODB.prototype.addPartRole = function(args, cb) {
    editRole(this, args, 'insert', 'part', cb);
  }
  PEODB.prototype.addStepRole = function(args, cb) {
    editRole(this, args, 'insert', 'step', cb);
  }
  PEODB.prototype.addTPsetRole = function(args, cb) {
    editRole(this, args, 'insert', 'tp_set', cb);
  }
  PEODB.prototype.addTPRole = function(args, cb) {
    editRole(this, args, 'insert', 'tp', cb);
  }
  PEODB.prototype.addTPrevRole = function(args, cb) {
    editRole(this, args, 'insert', 'tp_rev', cb);
  }
  PEODB.prototype.addFabProcessRole = function(args, cb) {
    editRole(this, args, 'insert', 'fab_process', cb);
  }

  // DELETEs
  PEODB.prototype.deletePartflowRole = function(args, cb) {
    editRole(this, args, 'delete', 'partflow', cb);
  }
  PEODB.prototype.deletePartRole = function(args, cb) {
    editRole(this, args, 'delete', 'part', cb);
  }
  PEODB.prototype.deleteStepRole = function(args, cb) {
    editRole(this, args, 'delete', 'step', cb);
  }
  PEODB.prototype.deleteTPsetRole = function(args, cb) {
    editRole(this, args, 'delete', 'tp_set', cb);
  }
  PEODB.prototype.deleteTPRole = function(args, cb) {
    editRole(this, args, 'delete', 'tp', cb);
  }
  PEODB.prototype.deleteTPrevRole = function(args, cb) {
    editRole(this, args, 'delete', 'tp_rev', cb);
  }
  PEODB.prototype.deleteFabProcessRole = function(args, cb) {
    editRole(this, args, 'delete', 'fab_process', cb);
  }

  //==========================================================================//
}

//============================================================================//
//============================================================================//

function editObjectRole(db, args, object_id, cb) {

  checkAssigner(db, args, object_id, function(err) {
    if (err) {
      return cb((args.propagate === propagating) ? null : err);
    }

    checkRoleRules(db, args, object_id, function(err) {
      if (err) {
        return cb((args.propagate === propagating) ? null : err);
      }

      doAction(db, args, object_id, function(err) {
        if (err) {
          return cb(err);
        }

        if (!args.propagate) {
          return cb();
        }
        args.propagate = propagating;

        peodbUtils.getSubObjectIDs(db, object_id, function(err, subIDs) {
          if (err) {
            return cb(err);
          }
          async.forEachSeries(subIDs,
            function(sub_object_id, cb) {
              return editObjectRole(db, args, sub_object_id, cb);
            },
          cb);
        });
      });
    });
  });
}

//============================================================================//
//============================================================================//

function doAction(db, args, object_id, cb) {
  var usersQueryStr =
    'SELECT user_id'
  + ' FROM object_roles'
  + ' WHERE object_id = '    + db.escape(object_id)
  + '   AND role_type_id = ' + db.escape(args.role_type_id)
  ;
  var rolesQueryStr =
    'SELECT role_type_id'
  + ' FROM object_roles'
  + ' WHERE object_id = ' + db.escape(object_id)
  + '   AND user_id = '   + db.escape(args.target_user_id)
  ;
  async.parallel({
    users: function(cb) { db.queryData(usersQueryStr, cb); },
    roles: function(cb) { db.queryData(rolesQueryStr, cb); },
  },
  function(err, data) {
    if (err) {
      return cb(err);
    }

    users = data.users.toArray(0);
    roles = data.roles.toArray(0);

    var actionFunc = null;
    switch (args.action) {
      case 'set':    { actionFunc = setRole;    break; }
      case 'insert': { actionFunc = insertRole; break; }
      case 'delete': { actionFunc = deleteRole; break; }
      default: {
        return cb(Error('invalid editRole action: ' + args.action));
      }
    }

    return actionFunc(db, args, object_id, users, roles, cb);
  });
}

function AorB(a, b) {
  return (typeof(a) !== 'undefined') ? a : b;
}

function pushResult(args, action, object_id, override) {
  var override = override || {};
  args.results[action].push({
    object_id:    object_id,
    user_id:      AorB(override.user_id, args.target_user_id),
    role_type_id: AorB(override.role_type_id, args.role_type_id),
  });
}

//============================================================================//

function setRole(db, args, object_id, users, roles, cb) {

  if ((users.length === 1) && (users[0] === args.target_user_id) &&
      (roles.length === 1) && (roles[0] === args.role_type_id)) {
    return cb(); // already present, and the only one
  }

  setDeleteUsers(db, args, object_id, users, function(err) {
    if (err) {
      return cb(err);
    }

    setDeleteRoles(db, args, object_id, roles, function(err) {
      if (err) {
        return cb(err);
      }

      if (users.indexOf(args.target_user_id) !== -1) {
        return cb(); // all done
      }

      var qStr =
        'INSERT INTO object_roles (object_id, user_id, role_type_id) VALUES '
      + '(' + db.escape(object_id)
      + ',' + db.escape(args.target_user_id)
      + ',' + db.escape(args.role_type_id)
      + ')'
      ;
      db.queryData(qStr, function(err) {
        if (err) {
          return cb(err);
        }
        pushResult(args, 'inserted', object_id);
        return cb();
      });
    });
  });
}

function setDeleteUsers(db, args, object_id, users, cb) {
  if (users.length <= 0) {
    return cb();
  }
  if (!args.roleInfo.single_role) {
    return cb();
  }
  // remove the other users
  var qStr =
    'DELETE FROM object_roles'
  + ' WHERE object_id = '    + db.escape(object_id)
  + '   AND role_type_id = ' + db.escape(args.role_type_id)
  + '   AND user_id <> '     + db.escape(args.target_user_id)
  ;
  db.queryData(qStr, function(err) {
    if (err) {
      return cb(err);
    }
    // and log the deletions
    for (var u = 0; u < users.length; u++) {
      var user_id = users[u];
      if (user_id !== args.target_user_id) {
        pushResult(args, 'deleted', object_id, { user_id: user_id });
      }
    }
    return cb();
  });
}

function setDeleteRoles(db, args, object_id, roles, cb) {
  if (roles.length <= 0) {
    return cb();
  }
  if (!args.roleInfo.key_role) {
    return cb();
  }

  // remove the other roles (that are flagged as `key_role`)
  var qStr =
    'DELETE ro'
  + ' FROM  object_roles ro'
  + '  JOIN role_types rt ON (rt.role_type_id = ro.role_type_id)'
  + ' WHERE ro.object_id = '     + db.escape(object_id)
  + '   AND ro.user_id = '       + db.escape(args.target_user_id)
  + '   AND ro.role_type_id <> ' + db.escape(args.role_type_id)
  + '   AND rt.key_role = TRUE'
  ;
  db.queryData(qStr, function(err) {
    if (err) {
      return cb(err);
    }
    // and log the deletions
    for (var r = 0; r < roles.length; r++) {
      var role_type_id = roles[r];
      if (role_type_id !== args.role_type_id) {
        pushResult(args, 'deleted', object_id, { role_type_id: role_type_id });
      }
    }
    return cb();
  });
}

//============================================================================//

function insertRole(db, args, object_id, users, roles, cb) {
  if (users.indexOf(args.target_user_id) !== -1) {
    return cb(); // already present
  }
  var qStr =
    'INSERT INTO object_roles (object_id, user_id, role_type_id) VALUES '
  + '(' + db.escape(object_id)
  + ',' + db.escape(args.target_user_id)
  + ',' + db.escape(args.role_type_id)
  + ')'
  ;
  db.queryData(qStr, function(err) {
    if (err) {
      return cb(err);
    }
    pushResult(args, 'inserted', object_id);
    return cb();
  });
}

//============================================================================//

function deleteRole(db, args, object_id, users, roles, cb) {
  if (users.indexOf(args.target_user_id) === -1) {
    return cb(); // nothing to be deleted
  }
  var qStr =
    'DELETE FROM object_roles'
  + ' WHERE object_id = '    + db.escape(object_id)
  + '   AND user_id = '      + db.escape(args.target_user_id)
  + '   AND role_type_id = ' + db.escape(args.role_type_id)
  ;
  db.queryData(qStr, function(err) {
    if (err) {
      return cb(err);
    }
    pushResult(args, 'deleted', object_id);
    return cb();
  });
}

//============================================================================//
//============================================================================//

function isSuperUser(args) {
  return (args.assigner_id < 0);
}

//============================================================================//

function isWatcherRole(args) {
  if (args.roleBrief !== 'Watcher') {
    return false;
  }
  // Watchers are self-assignments
  var srcNum = parseInt(args.assigner_id);
  var dstNum = parseInt(args.target_user_id);
  return (!isNaN(srcNum) && !isNaN(dstNum) && (srcNum === dstNum));
}

//============================================================================//

function checkAssigner(db, args, object_id, cb) {
  if (args.isWatcher || args.isSuper) {
    return cb();
  }
  // look for role assignment permissions on the target object
  var qStr =
    'SELECT 1'
  + ' FROM object_roles ro'
  + '   JOIN role_controls rc ON (rc.master_role_type_id = ro.role_type_id)'
  + '  WHERE ro.object_id = '          + db.escape(object_id)
  + '    AND ro.user_id = '            + db.escape(args.assigner_id)
  + '    AND rc.slave_role_type_id = ' + db.escape(args.role_type_id)
  ;
  db.queryData(qStr, function(err, data) {
    if (err) {
      return cb(err);
    }
    if (data.rows.length < 1) {
      return cb(Error('No Permission'));
    }
    return cb();
  });
}

//============================================================================//
//============================================================================//
//
//  checkRoleRules() is used to make sure that the `key_role` and `single_role`
//  `role_types` properties are enforced. Note that super-users can over-ride
//  these settings if it's necessary to violate them.
//

function checkRoleRules(db, args, object_id, cb) {
  if (args.isWatcher || args.isSuper) {
    return cb();
  }
  if (args.action !== 'insert') { // 'set' and 'delete' are always safe
    return cb();
  }
  checkKeyRole(db, args, object_id, function(err) {
    if (err) {
      return cb(err);
    }
    checkSingleRole(db, args, object_id, cb);
  });
}

//============================================================================//

function checkKeyRole(db, args, object_id, cb) {
  if (!args.roleInfo.key_role) {
    return cb();
  }
  var qStr =
    'SELECT role_type_id'
  + ' FROM object_roles'
  + ' WHERE object_id = ' + db.escape(object_id)
  + '   AND user_id = '   + db.escape(args.target_user_id)
  ;
  db.queryData(qStr, function(err, data) {
    if (err) {
      return cb(err);
    }
    var rows = data.rows;
    if (rows.length <= 0) {
      return cb();
    }
    var map = data.toMapArrays(0);
    if (map[args.role_type_id]) {
      return cb(); // already present, do not complain
    }
    return cb(Error('attempt to overload a key role'));
  });
}

//============================================================================//

function checkSingleRole(db, args, object_id, cb) {
  if (!args.roleInfo.single_role) {
    return cb();
  }
  var qStr =
    'SELECT user_id'
  + ' FROM object_roles'
  + ' WHERE object_id = '    + db.escape(object_id)
  + '   AND role_type_id = ' + db.escape(args.role_type_id)
  ;
  db.queryData(qStr, function(err, data) {
    if (err) {
      return cb(err);
    }
    var rows = data.rows;
    if (rows.length <= 0) {
      return cb();
    }
    var map = data.toMapArrays(0);
    if (map[args.target_user_id]) {
      return cb(); // already present, do not complain
    }
    return cb(Error('attempt to overload a single role'));
  });
}

//============================================================================//
//============================================================================//
