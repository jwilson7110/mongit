//============================================================================//

var print = console.log;

//============================================================================//

module.exports = function(PEODB) {

  var requiredArgs = [
    'user_id',
    'tp_rev_id',
    'hbin_num',
    'holdMin', // can be `null`
    'holdMax', // can be `null`
  ];


  PEODB.prototype.editTPrevHardbinLimits = function(args, cb) {
    var peodb = this;

    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing required argument: ' + missingArg));
    }

    // FIXME - make sure that the tp_rev is in the DRAFT state?

    peodb.checkTPrevRole(args, 'PE', function(err) {
      if (err) {
        return cb(err);
      }

      checkFields(args, function(err) {
        if (err) {
          return cb(err);
        }

        var db = peodb.sharedDB;

        var qStr =
          'UPDATE hardbins'
        + ' SET hold_min_percent = ' + db.escape(args.holdMin)
        + '   , hold_max_percent = ' + db.escape(args.holdMax)
        + ' WHERE tp_rev_id = '      + db.escape(args.tp_rev_id)
        + '   AND hbin_num = '       + db.escape(args.hbin_num)
        ;
        db.queryData(qStr, cb);
      });
    });
  }

  function checkPercent(value) {
    if (value === '')   { return null; }
    if (value === null) { return null; }
    var percent = parseFloat(value);
    if (isNaN(percent))  { throw Error('invalid percentage: ' + value); }
    if (percent <   0.0) { throw Error('invalid negative percentage');     }
    if (percent > 100.0) { throw Error('invalid percentage above 100%');   }
    return percent;
  }

  function checkFields(args, cb) {
    try {
      args.holdMin = checkPercent(args.holdMin);
      args.holdMax = checkPercent(args.holdMax);
    }
    catch (err) {
      return cb(err);
    }
    return cb();
  }
}

//============================================================================//
