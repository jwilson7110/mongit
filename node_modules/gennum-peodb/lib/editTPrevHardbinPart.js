//============================================================================//

var print = console.log;

var async = require('async');

//============================================================================//

module.exports = function(PEODB) {

  var requiredArgs = [
    'user_id',
    'tp_rev_id',
    'hbin_num',
    'part_id', // can be `null`
  ];

  PEODB.prototype.editTPrevHardbinPart = function(args, cb) {
    var peodb = this;

    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing required argument: ' + missingArg));
    }

    // part_id is used in exact tests
    args.part_id = parseInt(args.part_id);
    if (isNaN(args.part_id)) {
      args.part_id = null;
    }

    // FIXME - make sure that the tp_rev is in the DRAFT state

    peodb.checkTPrevRole(args, 'PE', function(err) {
      if (err) {
        return cb(err);
      }
      peodb.dbSession(args, function(db, cb) {
        setHardbinPart(peodb, db, args, cb);
      }, cb);
    });
  }

  //==========================================================================//

  function setHardbinPart(peodb, db, args, cb) {
    db.transaction(function(cb) {

      var part_id = args.part_id;

      async.parallel({
        partNumber: function(cb) { getPartNumber  (db, args, cb); },
        hbinInfo:   function(cb) { getHardbinInfo (db, args, cb); },
      },
      function(err, data) {
        if (err) {
          return cb(err);
        }

        var binName = peodb.calcHardbinName({
          hbin_num:   args.hbin_num,
          good_bin:   data.hbinInfo.good_bin,
          name:       data.hbinInfo.name,
          partNumber: data.partNumber,
        });

        var qArgs = { db: db, tp_rev_id: args.tp_rev_id };
        peodb.getTPrevStepID(qArgs, function(err, step_id) {
          if (err) {
            return cb(err);
          }

          getOldPartID(db, step_id, args, function(err, old_part_id) {
            if (err) {
              return cb(err);
            }

            // check to see if any changes are required
            if (old_part_id === part_id) {
              return cb();
            }

            // see how many other hardbins are using the step_output row
            getStepOutputID(db, part_id, step_id, function(err, step_output_id) {
              if (err) {
                return cb(err);
              }

              setHardbinData(db, step_output_id, binName, args, function(err) {
                if (err) {
                  return cb(err);
                }

                deleteStepOutputs(db, old_part_id, step_id, cb);
              });
            });
          });
        });
      });
    },
    cb);
  }

  //==========================================================================//

  function getHardbinInfo(db, args, cb) {
    var qStr =
      'SELECT name, good_bin'
    + ' FROM hardbins'
    + ' WHERE tp_rev_id = ' + db.escape(args.tp_rev_id)
    + '   AND hbin_num = '  + db.escape(args.hbin_num)
    ;
    db.queryData(qStr, function(err, data) {
      if (err) {
        return cb(err);
      }
      var rows = data.rows;
      if (rows.length !== 1) {
        return cb(Error('count not retrieve the hardbin information'));
      }
      return cb(null, rows[0].toMap());
    });
  }

  //==========================================================================//

  function getPartNumber(db, args, cb) {
    var part_id = args.part_id;
    if (part_id === null) {
      return cb(null, '');
    }
    var qStr =
      'SELECT part_number FROM parts WHERE part_id = ' + db.escape(part_id);
    db.queryData(qStr, function(err, data) {
      if (err) {
        return cb(err);
      }
      var rows = data.rows;
      if (rows.length !== 1) {
        return cb(Error('could not find the part name for: ' + part_id));
      }
      return cb(null, rows[0].part_number);
    });
  }

  //==========================================================================//

  function getOldPartID(db, step_id, args, cb) {
    var qStr =
      'SELECT so.part_id'
    + ' FROM hardbins     hb'
    + ' JOIN step_outputs so ON (so.step_output_id = hb.step_output_id)'
    + ' WHERE hb.hbin_num = ' + db.escape(args.hbin_num)
    + '   AND so.step_id = '  + db.escape(step_id)
    ;
    db.queryData(qStr, function(err, data) {
      if (err) {
        return cb(err);
      }
      if (data.rows.length <= 0) {
        return cb(null, null);
      }
      if (data.rows.length === 1) {
        return cb(null, data.rows[0].part_id);
      }
      return cb(Error('too many step_output_id rows'));
    });
  }

  //==========================================================================//

  function getStepOutputID(db, part_id, step_id, cb) {
    if (part_id === null) {
      return cb(null, null);
    }
    var qStr =
      'SELECT step_output_id'
    + ' FROM step_outputs'
    + ' WHERE part_id = ' + db.escape(part_id)
    + '   AND step_id = ' + db.escape(step_id)
    ;
    db.queryData(qStr, function(err, data) {
      if (err) {
        return cb(err);
      }
      if (data.rows.length === 1) {
        return cb(null, data.rows[0].step_output_id);
      }
      if (data.rows.length >= 1) {
        return cb(Error('too many step_output_ids')); // should not happen
      }
      return addStepOutput(db, part_id, step_id, cb);
    });
  }

  function addStepOutput(db, part_id, step_id, cb) {
     var qStr =
        'INSERT INTO step_outputs (part_id, step_id)'
      + ' VALUES (' + db.escape(part_id) + ',' + db.escape(step_id) + ')'
      ;
      db.queryData(qStr, function(err, data) {
        if (err) {
          return cb(err);
        }
        return cb(null, data.insertId);
      });
   }

  //==========================================================================//

  function setHardbinData(db, step_output_id, name, args, cb) {
    var qStr =
      'UPDATE hardbins'
    + ' SET step_output_id = ' + db.escape(step_output_id)
    + '   , name = '           + db.escape(name)
    + ' WHERE tp_rev_id = '    + db.escape(args.tp_rev_id)
    + '   AND hbin_num = '     + db.escape(args.hbin_num)
    ;
    db.queryData(qStr, cb);
  }

  //==========================================================================//

  function deleteStepOutputs(db, part_id, step_id, cb) {
    if (part_id === null) {
      return cb();
    }
    var qStr =
      'DELETE so'
    + ' FROM step_outputs  AS so'
    + ' LEFT JOIN hardbins AS hb ON (hb.step_output_id = so.step_output_id)'
    + ' WHERE hb.step_output_id IS NULL'
    + '   AND so.part_id = ' + db.escape(part_id)
    + '   AND so.step_id = ' + db.escape(step_id)
    ;
    db.queryData(qStr, cb);
  }

  //==========================================================================//
 }

//============================================================================//
