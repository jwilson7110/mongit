//============================================================================//

var print = console.log;

//============================================================================//

module.exports = function(PEODB) {

  var requiredArgs = [
    'user_id',
    'tp_rev_id',
    'part_id',
    'action',  // 'insert' or 'delete'
  ];

  PEODB.prototype.editTPrevInputPart = function(args, cb) {
    var peodb = this;

    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing required argument: ' + missingArg));
    }

    // FIXME - make sure that the tp_rev is in the DRAFT state

    peodb.checkTPrevRole(args, 'PE', function(err) {
      if (err) {
        return cb(err);
      }
      switch (args.action) {
        case 'insert': {
          peodb.dbSession(args, function(db, cb) {
            insertInputPart(peodb, db, args, cb);
          }, cb);
          break;
        }
        case 'delete': {
          peodb.dbSession(args, function(db, cb) {
            deleteInputPart(peodb, db, args, cb);
          }, cb);
          break;
        }
        default: {
          return cb(Error('editTPrevInputPart() invalid action'));
        }
      }
    });
  }

  //==========================================================================//

  function insertInputPart(peodb, db, args, cb) {
    // FIXME - double check that it is a valid input part
    //         by looking at the tp_set connectivity
    db.transaction(function(cb) {
      var qArgs = { db: db, tp_rev_id: args.tp_rev_id };
      peodb.getTPrevStepID(qArgs, function(err, step_id) {
        if (err) {
          return cb(err);
        }
        findPartOutputIDs(db, step_id, args.part_id, function(err, ids) {
          if (err) {
            return cb(err);
          }
          if (ids.length > 0) {
            return cb(Error('Duplicate Entry'));
          }
          var qStr =
            'INSERT INTO part_outputs (part_output_id, step_id, part_id)'
          + ' VALUES ('
          + 'NULL'
          + ',' + db.escape(step_id)
          + ',' + db.escape(args.part_id)
          + ')';
          ;
          db.queryData(qStr, cb);
        });
      });
    },
    cb);
  }

  function deleteInputPart(peodb, db, args, cb) {
    db.transaction(function(cb) {
      // find the tp_rev's step_id
      var qArgs = { db: db, tp_rev_id: args.tp_rev_id };
      peodb.getTPrevStepID(qArgs, function(err, step_id) {
        if (err) {
          return cb(err);
        }
        findPartOutputIDs(db, step_id, args.part_id, function(err, ids) {
          if (err) {
            return cb(err);
          }
          if (ids.length <= 0) {
            return cb(Error('part is not connected'));
          }
          // should only be one at most, but it's better to be safe
          var qStr =
            'DELETE FROM part_outputs WHERE part_output_id IN ('
          + ids.join(',')
          + ')'
          ;

          db.queryData(qStr, cb);
        });
      });
    },
    cb);
  }

  //==========================================================================//

  function findPartOutputIDs(db, step_id, part_id, cb) {
    var qStr =
      'SELECT part_output_id'
    + ' FROM  part_outputs'
    + ' WHERE step_id = ' + db.escape(step_id);
    + '   AND part_id = ' + db.escape(part_id);
    ;
    db.queryData(qStr, function(err, data) {
      if (err) {
        return cb(err);
      }
      return cb(null, data.toArray());
    });
  }
}

//============================================================================//
