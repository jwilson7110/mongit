//============================================================================//

var print = console.log;

//============================================================================//

var queryBasis =
  'SELECT'
  + '     p.part_id'
  + '   , p.object_id'
  + '   , p.part_number'
  + '   , p.sap_type'
  + '   , p.description'
  + '   , p.state'
  + '   , p.virtual'
  + '   , pt.part_type_id        AS part_type_id'
  + '   , pt.name                AS part_type_name'
  + '   , pt.abbr                AS part_type_abbr'
  + '   , pt.primary_type        AS part_type_primary'
  + '   , wf.fab_process_id      AS fab_process_id'
  + '   , wfp.name               AS fab_process_name'
  + '   , wfp.brief              AS fab_process_brief'
  + '   , wfp.baseline_d0        AS fab_process_baseline_d0'
  + '   , wfp.complexity_factor  AS fab_process_complexity_factor'
  + '   , wf.wafer_size_id       AS wafer_size_id'
  + '   , wsz.name               AS wafer_size_name'
  + '   , wf.bump_type_id        AS wafer_bump_type_id'
  + '   , wbt.name               AS wafer_bump_type_name'
  + '   , wf.bump_pitch_id       AS wafer_bump_pitch_id'
  + '   , wbp.name               AS wafer_bump_pitch_name'
  + '   , wf.is_pizza            AS wafer_is_pizza'
  + '   , di.gross_die_per_wafer AS die_gross_per_wafer'
  + '   , di.gross_is_guess      AS die_gross_is_guess'
  + '   , di.baseline_d0         AS die_baseline_d0'
  + '   , di.die_size_x          AS die_die_size_x'
  + '   , di.die_size_y          AS die_die_size_y'
  + '   , di.scribe_size_x       AS die_scribe_size_x'
  + '   , di.scribe_size_y       AS die_scribe_size_y'
  + '   , di.reticle_count_x     AS die_reticle_count_x'
  + '   , di.reticle_count_y     AS die_reticle_count_y'
  + '   , di.reticle_die_count_x AS die_reticle_die_count_x'
  + '   , di.reticle_die_count_y AS die_reticle_die_count_y'
  + '   , di.array_offset_x      AS die_array_offset_x'
  + '   , di.array_offset_y      AS die_array_offset_y'
  + '   , di.coord_offset_x      AS die_coord_offset_x'
  + '   , di.coord_offset_y      AS die_coord_offset_y'
  + '   , di.notch_degrees       AS die_notch_degrees'
  + '   , di.wem_blob_id         AS die_wem_blob_id'
  + '   , di.aoi_flag            AS die_aoi_flag'
  + '   , di.bump_flag           AS die_bump_flag'
  + '   , di.pkg_exclusion_mm    AS die_pkg_exclusion_mm'
  + '   , di.foundry_part_number AS die_foundry_part_number'
  + '   , di.foundry_map_blob_id AS die_foundry_map_blob_id'
  + '   , di.foundry_img_blob_id AS die_foundry_img_blob_id'
  + '   , pk.package_type_id     AS package_type_id'
  + '   , pk.ball_type_id        AS package_ball_type_id'
  + '   , pk.ball_pitch_id       AS package_ball_pitch_id'
  + '   , pk.package_size        AS package_size'
  + '   , pk.substrate_version   AS package_substrate_version'
  + '   , pk.pms_gendoc_num      AS package_pms_gendoc_num'
  + '   , pk.pin_count           AS package_pin_count'
  + '   , ppt.name               AS package_type_name'
  + '   , pbt.name               AS package_ball_type_name'
  + '   , pbp.name               AS package_ball_pitch_name'
  + ' FROM'
  + '   parts p'
  + '        JOIN part_types    pt  ON (pt.part_type_id = p.part_type_id)'
  + '   LEFT JOIN part_wafers   wf  ON (wf.part_id = p.part_id)'
  + '   LEFT JOIN bump_types    wbt ON (wbt.bump_type_id    = wf.bump_type_id)'
  + '   LEFT JOIN bump_pitches  wbp ON (wbp.bump_pitch_id   = wf.bump_pitch_id)'
  + '   LEFT JOIN wafer_sizes   wsz ON (wsz.wafer_size_id   = wf.wafer_size_id)'
  + '   LEFT JOIN fab_processes wfp ON (wfp.fab_process_id  = wf.fab_process_id)'
  + '   LEFT JOIN part_dies     di  ON (di.part_id          = p.part_id)'
  + '   LEFT JOIN part_packages pk  ON (pk.part_id          = p.part_id)'
  + '   LEFT JOIN package_types ppt ON (ppt.package_type_id = pk.package_type_id)'
  + '   LEFT JOIN ball_types    pbt ON (pbt.ball_type_id    = pk.ball_type_id)'
  + '   LEFT JOIN ball_pitches  pbp ON (pbp.ball_pitch_id   = pk.ball_pitch_id)'
  ;


module.exports = function(PEODB) {

  var requiredArgs = [
    'part_id',
  ];

  PEODB.prototype.getPartInfo = function(args, cb) {
    var peodb = this;

    if (!(args instanceof Object)) {
      args = { part_id: args };
    }

    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing required argument: ' + missingArg));
    }

    getPartInfo(peodb.sharedDB, args, cb);
  }

  function getPartInfo(db, args, cb) {
    var qStr =
      queryBasis
      + (' WHERE p.part_id = ' + db.escape(args.part_id))
      ;
    db.queryData(qStr, function(err, data) {
      if (err) {
        return cb(err);
      }
      if (data.rows.length <= 0) {
        return cb(Error('no matching parts'));
      }
      if (data.rows.length >= 2) {
        return cb(Error('too many matching parts'));
      }
      return cb(err, data.rows[0].toMap());
    });
  }
}

//============================================================================//
