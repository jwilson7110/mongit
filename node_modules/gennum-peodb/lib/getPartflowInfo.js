//============================================================================//

var print = console.log;

//============================================================================//

module.exports = function(PEODB) {

  var requiredArgs = [
    'partflow_id',
  ];

  PEODB.prototype.getPartflowInfo = function(args, cb) {
    var peodb = this;

    if (!(args instanceof Object)) {
      args = { partflow_id: args };
    }

    var partflowID;
    if (args.partflow_id) {
      partflowID = peodb.sharedDB.escape(args.partflow_id);
    }
    else if (args.root_part_id) {
      partflowID =
        '(SELECT partflow_id FROM partflows WHERE root_part_id = '
        + peodb.sharedDB.escape(args.root_part_id) + ')'
      ;
    }
    else {
      return cb(Error('missing required argument: partflow_id or root_part_id'));
    }

    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
    }

    peodb.dbSession(args, function(db, cb) {
      getPartflowInfo(db, partflowID, cb);
    }, cb);
  }

  function getPartflowInfo(db, partflowID, cb) {
    db.transaction(function(cb) {
      getRootPartID(db, partflowID, function(err, root_part_id) {
        if (err) {
          return cb(err);
        }
        getPartsAndSteps(db, partflowID, function(err, elements) {
          if (err) {
            return cb(err);
          }
          getStepInOuts(db, elements.steps, function(err, stepIOs) {
            if (err) {
              return cb(err);
            }
            makeInfo(root_part_id, elements, stepIOs, function(err, data) {
              return cb(err, data);
            });
          });
        });
      });
    },
    cb);
  }

  function getRootPartID(db, partflowID, cb) {
    var qStr =
      'SELECT root_part_id FROM partflows WHERE partflow_id = ' + partflowID;
    db.queryData(qStr, function(err, data) {
      if (err) {
        return cb(err);
      }
      if (data.rows.length !== 1) {
        return cb(Error('could not find the partflow root part'));
      }
      return cb(null, data.rows[0][0]);
    });
  }

  function getPartsAndSteps(db, partflowID, cb) {
    var qStr =
      'SELECT'
      + '   pfp.part_id, p.part_number, p.description,'
      + '   pt.part_type_id, pt.abbr as part_type_abbr'
      + ' FROM'
      + '   partflow_parts  pfp'
      + '   JOIN parts      p   ON (p.part_id = pfp.part_id)'
      + '   JOIN part_types pt  ON (pt.part_type_id = p.part_type_id)'
      + ' WHERE partflow_id = ' + partflowID;
    db.queryData(qStr, function(err, partData) {
      if (err) {
        return cb(err);
      }
      var qStr =
        'SELECT'
        + '   ps.step_id, st.step_type_id, st.step_abbr'
        + '   , ts.tp_set_id    AS tp_set_id'
        + '   , ts.name         AS tp_set_name'
        + '   , tp.tp_id        AS tp_id'
        + '   , tp.name         AS tp_name'
        + '   , tr.tp_rev_id    AS tp_rev_id'
        + '   , tr.name         AS tp_rev_name'
        + '   , sg.tp_stage_id  AS tp_set_stage_id'
        + '   , sg.abbr         AS tp_set_stage_abbr'
        + ' FROM'
        + '   partflow_steps        ps'
        + '   JOIN      steps       s   ON (s.step_id = ps.step_id)'
        + '   JOIN      step_types  st  ON (st.step_type_id = s.step_type_id)'
        + '   LEFT JOIN tp_sets     ts  ON (ts.step_id = s.step_id)'
        + '   LEFT JOIN tps         tp  ON (tp.step_id = s.step_id)'
        + '   LEFT JOIN tp_revs     tr  ON (tr.step_id = s.step_id)'
        + '   LEFT JOIN tp_stages   sg  ON (sg.tp_stage_id = ts.tp_stage_id)'
        + ' WHERE ps.partflow_id = ' + partflowID;
      db.queryData(qStr, function(err, stepData) {
        if (err) {
          return cb(err);
        }
        return cb(null, {
          parts: partData,
          steps: stepData,
        });
      });
    });
  }

  function getStepInOuts(db, steps, cb) {
    var stepIDs = steps.toArray();
    getOutputLinks(db, stepIDs, 'part', function(err, part_outputs) {
      if (err) { return cb(err); }
      getOutputLinks(db, stepIDs, 'step', function(err, step_outputs) {
        if (err) { return cb(err); }
        return cb(null, {
          part_outputs: part_outputs,
          step_outputs: step_outputs,
        });
      });
    });
  }

  function getOutputLinks(db, step_ids, type, cb) {
    if (step_ids.length <= 0) {
      return cb(null, { rows: [] });
    }

    var inStr = '(';
    for (var i = 0; i < step_ids.length; i++) {
      if (i !== 0) { inStr += ','; }
      inStr += step_ids[i];
    }
    inStr += ')';

    var qStr =
      'SELECT ' + type + '_output_id, step_id, part_id, count'
      + ' FROM ' + type + '_outputs'
      + ' WHERE step_id IN ' + inStr;
    db.queryData(qStr, function(err, data) {
      return cb(err, data);
    });
  }

  function makeInfo(root_part_id, elements, stepIOs, cb) {
    var parts = {};
    for (var i = 0; i < elements.parts.rows.length; i++) {
      var row = elements.parts.rows[i];
      parts[row.part_id] = row.toMap();
    }
    var steps = {};
    for (var i = 0; i < elements.steps.rows.length; i++) {
      var row = elements.steps.rows[i];
      steps[row.step_id] = row.toMap();
    }
    var part_outputs = {};
    for (var i = 0; i < stepIOs.part_outputs.rows.length; i++) {
      var row = stepIOs.part_outputs.rows[i];
      part_outputs[row.part_output_id] = row.toMap();
    }
    var step_outputs = {};
    for (var i = 0; i < stepIOs.step_outputs.rows.length; i++) {
      var row = stepIOs.step_outputs.rows[i];
      step_outputs[row.step_output_id] = row.toMap();
    }
    var info = {
      root_part_id: root_part_id,
      parts:        parts,
      steps:        steps,
      part_outputs: part_outputs,
      step_outputs: step_outputs,
    };
    return cb(null, info);
  }
}

//============================================================================//
