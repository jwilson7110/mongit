//============================================================================//

var print = console.log;

//============================================================================//

module.exports = function(PEODB) {

  function getPlanningEntries(peodb, args, cb) {

    var db = peodb.sharedDB;

    if (typeof(args[args.sql_field]) === 'undefined') {
      return cb(Error('missing required argument: ' + args.sql_field));
    }

    var fields = ' user_id, create_time, entry_type, year, week, value';
    if (args.inactive) {
      fields += ', active';
    }

    var qStr =
      'SELECT' + fields
      + ' FROM ' + args.sql_table
      + ' WHERE'
      + '   ' + args.sql_field + ' = ' + db.escape(args[args.sql_field])
      ;

    if (!args.inactive) {
      qStr += ' AND active = TRUE';
    }
    if (args.entry_type) {
      qStr += ' AND entry_type = ' + db.escape(args.entry_type);
    }
    if (args.user_id) {
      qStr += ' AND user_id = ' + db.escape(args.user_id);
    }
    if (args.minDate && args.minDate.year && args.minDate.week) {
      var maxVal = (parseInt(args.minDate.year) * 100)
                  + parseInt(args.minDate.week);
      qStr += ' AND ((year * 100) + week) >= ' + minVal + ')';
    }
    if (args.maxDate && args.maxDate.year && args.maxDate.week) {
      var maxVal = (parseInt(args.maxDate.year) * 100)
                  + parseInt(args.maxDate.week);
      qStr += ' AND ((year * 100) + week) <= ' + maxVal + ')';
    }
    qStr += ' ORDER BY year, week';

    return db.queryData(qStr, cb);
  }

  //==========================================================================//

  function resolveArgs(args, label) {
    if (!(args instanceof Object)) {
      args = {};
      args[label] = args;
    }
    return args;
  }

  //==========================================================================//

  PEODB.prototype.getProcessD0Entries = function(args, cb) {
    var peodb = this;
    var fieldName = 'fab_process_id';
    args = resolveArgs(args, fieldName);
    args.sql_field = fieldName;
    args.sql_table = 'plan_d0_process_entries';
    return getPlanningEntries(peodb, args, cb);
  }

  PEODB.prototype.getPartD0Entries = function(args, cb) {
    var peodb = this;
    var fieldName = 'part_id';
    args = resolveArgs(args, fieldName);
    args.sql_field = fieldName;
    args.sql_table = 'plan_d0_die_entries';
    return getPlanningEntries(peodb, args, cb);
  }

  PEODB.prototype.getPartYieldEntries = function(args, cb) {
    var peodb = this;
    var fieldName = 'part_id';
    args = resolveArgs(args, fieldName);
    args.sql_field = fieldName;
    args.sql_table = 'plan_part_yield_entries';
    return getPlanningEntries(peodb, args, cb);
  }

  PEODB.prototype.getTestTimeEntries = function(args, cb) {
    var peodb = this;
    var fieldName = 'tp_id';
    args = resolveArgs(args, fieldName);
    args.sql_field = fieldName;
    args.sql_table = 'plan_test_time_entries';
    return getPlanningEntries(peodb, args, cb);
  }

  PEODB.prototype.getGenericPlanningEntries = function(args, cb) {
    print('PEODB.prototype.getGenericPlanningEntries'); // FIXME
    var peodb = this;
    var fieldName = 'item_name';
    args = resolveArgs(args, fieldName);
    args.sql_field = fieldName;
    args.sql_table = 'plan_generic_entries';
    return getPlanningEntries(peodb, args, cb);
  }

  //==========================================================================//
}

//============================================================================//
