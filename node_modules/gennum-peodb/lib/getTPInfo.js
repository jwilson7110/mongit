//============================================================================//

var print = console.log;

//============================================================================//

var queryBasis =
  'SELECT'
  + '     tp.tp_id          AS tp_id'
  + '   , s.step_id         AS step_id'
  + '   , o.object_id       AS object_id'
  + '   , tp.name           AS name'
  + '   , tp.comments       AS comments'
  + '   , tp.create_time    AS create_time'
  + '   , tp.create_user_id AS create_user_id'
  + '   , tp.part_id        AS tp_part_id'
  + '   , p.part_number     AS tp_part_number'
  // partflow
  + '   , ts.partflow_id    AS partflow_id'
  + '   , pf.name           AS partflow_name'
  + '   , pf.description    AS partflow_desc'
  + '   , pf.root_part_id   AS partflow_root_part_id'
  // tp_set
  + '   , tp.tp_set_id      AS tp_set_id'
  + '   , ts.name           AS tp_set_name'
  + '   , ts.step_id        AS tp_set_step_id'
  + '   , ts.product_code   AS tp_set_product_code'
  // tp_stage
  + '   , ts.tp_stage_id    AS tp_stage_id'
  + '   , st.stage          AS tp_stage_type'
  + '   , st.stage_num      AS tp_stage_num'
  + '   , st.abbr           AS tp_stage_abbr'
  + '   , st.description    AS tp_stage_desc'
  // tp_type
  + '   , tp.tp_type_id     AS tp_type_id'
  + '   , ty.abbr           AS tp_type_abbr'
  + '   , ty.description    AS tp_type_desc'
  // ate
  + '   , tp.ate_type_id    AS ate_type_id'
  + '   , at.brief          AS ate_type_name'
  + '   , at.abbr           AS ate_type_abbr'
  + '   , at.description    AS ate_type_desc'
  + '   , at.company_id     AS ate_type_company_id'
  + '   , at.svn_root       AS ate_type_svn_root'
  // user
  + '   , us.name           AS user_name'

  + ' FROM'
  + '   tps             tp'
  + '   JOIN steps      s   ON (s.step_id       = tp.step_id)'
  + '   JOIN objects    o   ON (o.object_id     = s.object_id)'
  + '   JOIN tp_sets    ts  ON (ts.tp_set_id    = tp.tp_set_id)'
  + '   JOIN partflows  pf  ON (pf.partflow_id  = ts.partflow_id)'
  + '   JOIN tp_stages  st  ON (st.tp_stage_id  = ts.tp_stage_id)'
  + '   JOIN tp_types   ty  ON (ty.tp_type_id   = tp.tp_type_id)'
  + '   JOIN ate_types  at  ON (at.ate_type_id  = tp.ate_type_id)'
  + '   JOIN users      us  ON (us.user_id      = tp.create_user_id)'
  + '   LEFT JOIN parts p   ON (p.part_id       = tp.part_id)'
  ;

module.exports = function(PEODB) {

  var requiredArgs = [ // either
    //'name',
    //'tp_id',
  ];

  PEODB.prototype.getTPInfo = function(args, cb) {
    var peodb = this;

    if (!(args instanceof Object)) {
      args = { tp_id: args };
    }

    if (!args.tp_id && !args.name) {
      return cb(Error('missing required argument: name or tp_id'));
    }
    if (args.tp_id && args.name) {
      return cb(Error('missing required argument: name or tp_id, not both'));
    }

    getTPInfo(peodb.sharedDB, args, cb);
  }

  function getTPInfo(db, args, cb) {
    var qStr = queryBasis;
    if (args.name) {
      qStr += ' WHERE tp.name = ' + db.escape(args.name)
    }
    if (args.tp_id) {
      qStr += ' WHERE tp.tp_id = ' + db.escape(args.tp_id)
    }
    db.queryData(qStr, function(err, data) {
      if (err) {
        return cb(err);
      }
      if (data.rows.length <= 0) {
        return cb(Error('no matching test programs'));
      }
      if (data.rows.length >= 2) {
        return cb(Error('too many matching test programs'));
      }
      return cb(null, data.rows[0].toMap());
    });
  }
}

//============================================================================//
