//============================================================================//

var print = console.log;

//============================================================================//

var queryBasis =
  'SELECT'
  + '     tr.tp_rev_id'
  + '   , s.step_id'
  + '   , o.object_id'
  + '   , tr.tp_id'
  + '   , tr.name'
  + '   , tr.rev'
  + '   , tr.rc'
  + '   , tr.state'
  + '   , tr.is_rel_rev'
  + '   , tr.rc_tp_rev_id'
  + '   , tr.trial_run_required'
  + '   , rc_src.name AS rc_tp_rev_name'
  + '   , rc_dst.name AS rel_tp_rev_name'
  + '   , tr.create_time'
  + '   , tr.create_user_id'
  + '   , tr.svn_url'
  + '   , tr.svn_rev'
  + '   , tr.archive_name'
  + '   , tr.archive_size'
  + '   , tr.archive_crc'
  + '   , tr.archive_sha256dir'
  + '   , tr.site_count'
  + '   , tr.vector_size'
  + '   , tr.disk_space'
  + '   , tr.reason'
  + '   , tr.special_hw'
  + '   , tr.special_instrs'
  + '   , tr.comments'
  + '   , tr.temperature'
  + '   , tr.avg_test_time'
  + '   , tr.wafer_exclusion_mm'
  + '   , tr.task_handle'
  + '   , tr.task_error'
  + '   , tr.task_time'
  + '   , rc_src.avg_test_time AS rc_avg_test_time'
  // partflow
  + '   , ts.partflow_id    AS partflow_id'
  + '   , pf.name           AS partflow_name'
  + '   , pf.description    AS partflow_desc'
  + '   , pf.root_part_id   AS partflow_root_part_id'
  // tp_set
  + '   , tp.tp_set_id      AS tp_set_id'
  + '   , ts.name           AS tp_set_name'
  + '   , ts.step_id        AS tp_set_step_id'
  + '   , ts.product_code   AS tp_set_product_code'
  // tp
  + '   , tp.tp_id          AS tp_id'
  + '   , tp.name           AS tp_name'
  + '   , tp.comments       AS tp_comments'
  + '   , tp.part_id        AS tp_part_id'
  + '   , p.part_number     AS tp_part_number'
  // tp_stage
  + '   , ts.tp_stage_id    AS tp_stage_id'
  + '   , st.stage          AS tp_stage_type'
  + '   , st.stage_num      AS tp_stage_num'
  + '   , st.abbr           AS tp_stage_abbr'
  + '   , st.description    AS tp_stage_desc'
  // tp_type
  + '   , tp.tp_type_id     AS tp_type_id'
  + '   , ty.abbr           AS tp_type_abbr'
  + '   , ty.description    AS tp_type_desc'
  // ate
  + '   , tp.ate_type_id    AS ate_type_id'
  + '   , at.brief          AS ate_type_name'
  + '   , at.abbr           AS ate_type_abbr'
  + '   , at.description    AS ate_type_desc'
  + '   , at.company_id     AS ate_type_company_id'
  + '   , at.svn_root       AS ate_type_svn_root'
  + '   , ate_sw.version    AS ate_sw_version'
  + '   , ate_os.version    AS ate_os_version'
  + '   , ate_sw.ate_sw_version_id AS ate_sw_version_id'
  + '   , ate_os.ate_os_version_id AS ate_os_version_id'
  // user
  + '   , us.name           AS user_name'

  + ' FROM'
  + '   tp_revs           tr'
  + '   LEFT JOIN tp_revs rc_src  ON (rc_src.tp_rev_id = tr.rc_tp_rev_id)'
  + '   LEFT JOIN tp_revs rc_dst  ON (rc_dst.rc_tp_rev_id = tr.tp_rev_id)'
  + '   JOIN steps        s   ON (s.step_id       = tr.step_id)'
  + '   JOIN objects      o   ON (o.object_id     = s.object_id)'
  + '   JOIN tps          tp  ON (tp.tp_id        = tr.tp_id)'
  + '   JOIN tp_sets      ts  ON (ts.tp_set_id    = tp.tp_set_id)'
  + '   LEFT JOIN parts   p   ON (p.part_id       = tp.part_id)'
  + '   JOIN partflows    pf  ON (pf.partflow_id  = ts.partflow_id)'
  + '   JOIN tp_stages    st  ON (st.tp_stage_id  = ts.tp_stage_id)'
  + '   JOIN tp_types     ty  ON (ty.tp_type_id   = tp.tp_type_id)'
  + '   JOIN users        us  ON (us.user_id      = tr.create_user_id)'
  + '   JOIN ate_types    at  ON (at.ate_type_id  = tp.ate_type_id)'
  + '   LEFT JOIN ate_os_versions  ate_os  ON (ate_os.ate_os_version_id = tr.ate_os_version_id)'
  + '   LEFT JOIN ate_sw_versions  ate_sw  ON (ate_sw.ate_sw_version_id = tr.ate_sw_version_id)'
  ;

module.exports = function(PEODB) {

  var requiredArgs = [ // either
    //'name',
    //'tp_rev_id',
  ];

  PEODB.prototype.getTPrevInfo = function(args, cb) {
    var peodb = this;

    if (!(args instanceof Object)) {
      args = { tp_rev_id: args };
    }

    if (!args.tp_rev_id && !args.name) {
      return cb(
        Error('missing required argument: name or tp_rev_id')
      );
    }
    if (args.tp_rev_id && args.name) {
      return cb(
        Error('missing required argument: name or tp_rev_id, not both')
      );
    }

    getTPrevInfo(peodb.sharedDB, args, cb);
  }

  function getTPrevInfo(db, args, cb) {
    var qStr = queryBasis;
    if (args.name) {
      qStr += ' WHERE tr.name = ' + db.escape(args.name)
    }
    if (args.tp_rev_id) {
      qStr += ' WHERE tr.tp_rev_id = ' + db.escape(args.tp_rev_id)
    }
    db.queryData(qStr, function(err, data) {
      if (err) {
        return cb(err);
      }
      if (data.rows.length <= 0) {
        return cb(Error('no matching test program revisions'));
      }
      if (data.rows.length >= 2) {
        return cb(Error('too many matching test program revisions'));
      }
      return cb(null, data.rows[0].toMap());
    });
  }
}

//============================================================================//
