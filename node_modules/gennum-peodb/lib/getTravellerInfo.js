//============================================================================//

var print = console.log;

//============================================================================//

var ent = require('ent');

function htmlEsc(x) {
  return ent.encode(x.toString()).replace(/\n/g, '<br />');
}

//============================================================================//

var corpInfo = { // FIXME - definitely not correct
  company_address: '123 Bogus Dr.<br />Fakeland<br />Texas',
  company_phone:   '(613) 555-1234',
  contact_address: '123 Bogus Dr.<br />Fakeland<br />Texas',
  contact_phone:   '(613) 555-1234 x666',
};

//============================================================================//


module.exports = function(PEODB) {

  var requiredArgs = [ // either
    //'name',
    //'tp_rev_id',
  ];

  PEODB.prototype.getTravellerInfo = function(args, cb) {
    var peodb = this;

    peodb.getTPrevInfo(args, function(err, tpRevInfo) {
      if (err) {
        return cb(err);
      }

      peodb.getTPrevHardbins(tpRevInfo.tp_rev_id, function(err, hardbins) {
        if (err) {
          return cb(err);
        }

        peodb.getPartOutputs(tpRevInfo.step_id, function(err, inputParts) {
          if (err) {
            return cb(err);
          }

          var rawData = {
            tpRevInfo:  tpRevInfo,
            hardbins:   hardbins,
            inputParts: inputParts,
          };

          return cb(null, sanitizeData(rawData));
        });
      });
    })
  }
}

//============================================================================//

function exists(x) {
  return (typeof(x) !== 'undefined') && (x !== null);
}

function isNumber(x) {
  return (typeof(x) === 'number');
}

function encodeString(x) {
  return exists(x) ? htmlEsc(x) : '';
}

function encodeCelsius(x) {
  return isNumber(x) ? htmlEsc(x.toFixed(1) + ' \u00b0C') : '';
}

function encodeDuration(x) {
  return isNumber(x) ? htmlEsc(x.toFixed(3) + ' seconds') : '';
}

function encodePercent(x) {
  return isNumber(x) ? htmlEsc(x.toFixed(1) + '%') : '';
}

function encodeBinType(type) {
  return type ? 'Pass' : 'Fail';
}

//============================================================================//

function sanitizeData(rawData) {

  var info  = rawData.tpRevInfo;

  var traveller  = {
    tp_rev_name:     encodeString   (info.name),           // TPrev's name
    site_count:      encodeString   (info.site_count),     // number of test sites
    ate_os_version:  encodeString   (info.ate_os_version), // tester OS version
    ate_sw_version:  encodeString   (info.ate_sw_version), // tester SW version
    temperature:     encodeCelsius  (info.temperature),    // in degrees Celsius
    special_hw:      encodeString   (info.special_hw),
    special_instrs:  encodeString   (info.special_instrs),
    avg_test_time:   encodeDuration (info.avg_test_time),  // expected test time (number)

    inputParts: sanitizeInputParts (rawData.inputParts),
    hardbins:   sanitizeHardbins   (rawData.hardbins),
  };

  for (var key in corpInfo) {
    traveller[key] = corpInfo[key];
  }

  return traveller;
}

//============================================================================//

function sanitizeInputParts(rawInputParts) {
  var inputParts = [];
  var rows = rawInputParts.rows;
  for (var r = 0; r < rows.length; r++) {
    var row = rows[r];
    inputParts.push(encodeString(row.part_number));
  }
  return inputParts;
}

//============================================================================//

function sanitizeHardbins(rawHardbins) {
  var hardbins = [];
  var rows = rawHardbins.rows;
  for (var r = 0; r < rows.length; r++) {
    var row = rows[r];
    var hardbin = {
      hbin_num:         encodeString(row.hbin_num),
      name:             encodeString(row.name),
      bin_type:         encodeBinType(row.good_bin),
      hold_min_percent: encodePercent(row.hold_min_percent),
      hold_max_percent: encodePercent(row.hold_max_percent),
      part_number:      encodeString(row.part_number),
    };
    hardbins.push(hardbin);
  }
  return hardbins;
}

//============================================================================//
//
//  unit testing
//

if (require.main === module) {
  var colors = require('colors');

  var peodbConf = require('../../../peodb.conf.js');
  var peodb = require('gennum-peodb').setDefault(peodbConf);

  var tp_rev = process.argv[2] || 'GN2412_A1W0_F1SP_rev030_RC01';
  var tpRevID = parseInt(tp_rev);
  if (isNaN(tpRevID)) {
    tp_rev = { name: tp_rev };
  } else {
    tp_rev = tpRevID;
  }

  peodb.getTravellerInfo(tp_rev, function(err, json) {
    peodb.end();
    if (err) {
      print(err.toString().bold.red);
      return;
    }
    print(JSON.stringify(json, null, '  '));
  });
}

//============================================================================//
