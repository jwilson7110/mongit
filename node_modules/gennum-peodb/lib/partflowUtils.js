//============================================================================//

var print = console.log;

//============================================================================//

var partPrefix = 'part_';
var stepPrefix = 'step_';

//============================================================================//

module.exports = function(PEODB) {
  PEODB.prototype.cleanPartflow   = cleanPartflow;
  PEODB.prototype.processPartflow = processPartflow;
}

//============================================================================//

function processPartflow(partflow) {
  var peodb = this;

  var root_part_id = partflow.root_part_id;
  var parts        = partflow.parts;
  var steps        = partflow.steps;
  var part_outputs = partflow.part_outputs;
  var step_outputs = partflow.step_outputs;

  for (var part_id in parts) {
    var part = parts[part_id];
    part.nodeType = 'part';
    part.nodeTag = partPrefix + part_id;
    part.ingress = {};
    part.ingressEach = function(func) {
      for (var step_id in this.ingress) {
        if (func(steps[step_id]) === false) {
          return stepPrefix + step_id;
        }
      }
    }
    part.egress  = {};
    part.egressEach = function(func) {
      for (var step_id in this.egress) {
        if (func(steps[step_id]) === false) {
          return stepPrefix + step_id;
        }
      }
    }
  }

  for (var step_id in steps) {
    var step = steps[step_id];
    step.nodeType = 'step';
    step.nodeTag = stepPrefix + step_id;
    step.ingress = {};
    step.ingressEach = function(func) {
      for (var part_id in this.ingress) {
        if (func(parts[part_id]) === false) {
          return partPrefix + part_id;
        }
      }
    }
    step.egress  = {};
    step.egressEach = function(func) {
      for (var part_id in this.egress) {
        if (func(parts[part_id]) === false) {
          return partPrefix + part_id;
        }
      }
    }
  }

  for (var part_output_id in part_outputs) {
    var part_output = part_outputs[part_output_id];
    var part_id = part_output.part_id;
    var step_id = part_output.step_id;
    var part = parts[part_id];
    var step = steps[step_id];
    if (part && step) {
      part.egress[step_id]  = step;
      step.ingress[part_id] = part;
    }
  }

  for (var step_output_id in step_outputs) {
    var step_output = step_outputs[step_output_id];
    var part_id = step_output.part_id;
    var step_id = step_output.step_id;
    var part = parts[part_id];
    var step = steps[step_id];
    if (part && step) {
      part.ingress[step_id] = step;
      step.egress[part_id]  = part;
    }
  }

  return partflow;
}

//============================================================================//

function traceParents(node, partflow, collected) { // FIXME
}

//============================================================================//

function cleanNulls(obj) {
  for (var k in obj) {
    if (obj[k] === null) {
      delete obj[k];
    }
  }
  return obj;
}

function cleanPartflow(partflow) {
  var parts = partflow.parts;
  for (var part_id in parts) {
    var part = parts[part_id];
    delete part.nodeType;
    delete part.nodeTag;
    delete part.ingress;
    delete part.egress;
    cleanNulls(part);
  }
  var steps = partflow.steps;
  for (var step_id in steps) {
    var step = steps[step_id];
    delete step.nodeType;
    delete step.nodeTag;
    delete step.ingress;
    delete step.egress;
    cleanNulls(step);
  }
  return partflow;
}

//============================================================================//
