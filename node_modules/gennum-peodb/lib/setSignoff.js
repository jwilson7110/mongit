//============================================================================//

var print = console.log;

var async = require('async');

//============================================================================//

module.exports = function(PEODB) {

  var requiredArgs = [
    'user_id',
    'tp_rev_id',
    'signoff_id',
    'state', // the signoff state, pass/fail/waiver/null
    'comments',
  ];

  PEODB.prototype.setSignoff = function(args, cb) {
    var peodb = this;

    var missingArg = peodb.checkArgs(requiredArgs, args);
    if (missingArg) {
      return cb(Error('missing required argument: ' + missingArg));
    }

    switch (args.state) {
      case 'PASS': { break; }
      case 'FAIL':
      case 'WAIVER': {
        if (!args.comments) {
          return cb(Error('FAIL and WAIVER require comments'));
        }
        break;
      }
      case null:
      case '': {
        args.state = null;
        break;
      }
      default: {
        return cb(Error('Invalid signoff state: ' + args.state));
      }
    }

    if (typeof(args.comments) === 'string') {
      args.comments = args.comments.trim();
      if (args.comments.length === 0) {
        args.comments = null;
      }
    }

    peodb.dbSession(args, function(db, cb) {
      setSignoff(peodb, db, args, cb);
    }, cb);
  }

  function setSignoff(peodb, db, args, cb) {
    db.transaction(function(cb) {
      var qStr =
        'SELECT'
      + '   s.role_type_id'
      + ' , s.state'
      + ' , s.user_id'
      + ' , s.signoff_id'
      + ' , a.audit_id'
      + ' , rt.brief AS role_brief'
      + ' , tr.state        AS tp_rev_state'
      + ' , at.tp_rev_state AS audit_tp_rev_state'
      + ' FROM signoffs       s'
      + ' JOIN audit_signoffs sa ON (sa.signoff_id = s.signoff_id)'
      + ' JOIN audits         a  ON (a.audit_id = sa.audit_id)'
      + ' JOIN role_types     rt ON (rt.role_type_id  = s.role_type_id)'
      + ' JOIN audit_types    at ON (at.audit_type_id = a.audit_type_id)'
      + ' JOIN tp_revs        tr ON (tr.tp_rev_id = a.tp_rev_id)'
      + ' WHERE s.signoff_id = ' + db.escape(args.signoff_id)
      ;
      db.query1Row(qStr, function(err, data) {
        if (err) {
          return cb(err);
        }
        if (data.tp_rev_state !== data.audit_tp_rev_state) {
          return cb(Error('Wrong state - try reloading this page'));
        }
        peodb.checkTPrevRole(args, data.role_brief, function(err) {
          if (err) {
            return cb(err);
          }
          var qStr =
            'UPDATE signoffs SET'
          + '  user_id = '  + db.escape(args.user_id)
          + ', state = '    + db.escape(args.state)
          + ', comments = ' + db.escape(args.comments)
          + ', signoff_time = UNIX_TIMESTAMP()'
          + ', stale = FALSE'
          + ' WHERE signoff_id = ' + db.escape(args.signoff_id)
          ;
          db.queryData(qStr, function(err) {
            if (err) {
              return cb(err);
            }
            getSignoffData(db, args.signoff_id, cb);
          });
        });
      });
    },
    cb);
  }
}

//============================================================================//

function getSignoffData(db, signoff_id, cb) {
  getSignoffState(db, signoff_id, function(err, state) {
    if (err) {
      return cb(err);
    }

    state = state.toMap();

    var audit_id = state.audit_id;

    async.series({
      needSignoffs: function(cb) { calcNeedSignoffs(db, audit_id, cb) },
      haveComments: function(cb) { calcHaveComments(db, audit_id, cb) },
    },
    function(err, data) {
      if (err) {
        return cb(err);
      }
      state.needSignoffs = data.needSignoffs;
      state.haveComments = data.haveComments;
      return cb(null, state);
    });
  });
}

function getSignoffState(db, signoff_id, cb) {
  var qStr =
    'SELECT'
  + '   s.role_type_id'
  + ' , s.state'
  + ' , s.user_id'
  + ' , s.signoff_id'
  + ' , s.comments'
  + ' , a.audit_id'
  + ' , tr.state AS tp_rev_state'
  + ' , rt.brief AS role_brief'
  + ' , u.name   AS user_name'
  + ' FROM signoffs       s'
  + ' JOIN audit_signoffs sa ON (sa.signoff_id = s.signoff_id)'
  + ' JOIN audits         a  ON (a.audit_id = sa.audit_id)'
  + ' JOIN role_types     rt ON (rt.role_type_id  = s.role_type_id)'
  + ' JOIN audit_types    at ON (at.audit_type_id = a.audit_type_id)'
  + ' JOIN tp_revs        tr ON (tr.tp_rev_id = a.tp_rev_id)'
  + ' LEFT JOIN users     u  ON (u.user_id = s.user_id)'
  + ' WHERE s.signoff_id = ' + db.escape(signoff_id)
  ;
  db.query1Row(qStr, cb);
}

function calcNeedSignoffs(db, audit_id, cb) {
  var qStr =
    'SELECT 1'
  + ' FROM audits         a'
  + ' JOIN audit_signoffs sa ON (sa.audit_id = a.audit_id)'
  + ' JOIN signoffs       s  ON (s.signoff_id = sa.signoff_id)'
  + ' JOIN role_types     rt ON (rt.role_type_id = s.role_type_id)'
  + ' WHERE a.audit_id = ' + db.escape(audit_id)
  +   ' AND rt.brief <> "PRU"' // ignore automated entries
  +   ' AND (ISNULL(s.state) OR (s.stale = TRUE))'
  ;
  db.queryData(qStr, function(err, data) {
    if (err) {
      return cb(err);
    }
    return cb(null, data.rows.length >= 1);
  });
}

function calcHaveComments(db, audit_id, cb) {
  var qStr =
    'SELECT 1'
  + ' FROM audits         a'
  + ' JOIN audit_signoffs sa ON (sa.audit_id = a.audit_id)'
  + ' JOIN signoffs       s  ON (s.signoff_id = sa.signoff_id)'
  + ' JOIN role_types     rt ON (rt.role_type_id = s.role_type_id)'
  + ' WHERE a.audit_id = ' + db.escape(audit_id)
  +   ' AND NOT ISNULL(s.comments)'
  +   ' AND LENGTH(s.comments) > 0'
  ;
  db.queryData(qStr, function(err, data) {
    if (err) {
      return cb(err);
    }
    return cb(null, data.rows.length >= 1);
  });
}

//============================================================================//
//============================================================================//
