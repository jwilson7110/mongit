//============================================================================//
//
//  Requires the `ldapsearch` command line utility, on debian based systems:
//
//    sudo apt-get install ldap-utils
//
//============================================================================//

exports.checkLogin            = checkLogin;
exports.getUserList           = getUserList;
exports.getUserInfoByID       = getUserInfoByID;
exports.getUserInfoByDN       = getUserInfoByDN;
exports.getUserInfoByEmail    = getUserInfoByEmail;
exports.getUserInfoByCallsign = getUserInfoByCallsign;
exports.getUserInfoByFullname = getUserInfoByFullname;

//============================================================================//

var child_process = require('child_process');

//============================================================================//

var ldapConfig = require('/etc/peo/config').getLDAPConfig();

var ldapURL    = ldapConfig.url;
var ldapBaseDN = ldapConfig.usersDN;
var ldapBindDN = ldapConfig.bindDN;
var ldapPassword = ldapConfig.password;

//============================================================================//

var defaultAttributes = [
//  'dn', // always present
  'name',
  'mail',
  'employeeNumber',
  'title',
  'manager',
  'telephoneNumber',
  'mobile',
  'sAMAccountName',
  'physicalDeliveryOfficeName',
  'directReports',
];

//============================================================================//
//============================================================================//

function escapeShell(str) {
  return '"' + str.replace(/(["`$\\])/g,'\\$1') + '"';
};

function runQuery(bindDN, password, filter, attributes, cb) {
  var args = [
    '-x',
    '-H', escapeShell(ldapURL),
    '-s', 'sub',
    '-b', escapeShell(ldapBaseDN),
    '-w', escapeShell(password),
    '-D', escapeShell(bindDN),
    escapeShell(filter),
  ];
  args = args.concat(attributes);

  var child = child_process.exec(
    'ldapsearch ' + args.join(' '),
    { maxBuffer: 16 * 1024 * 1024 },
    function(error, stdout, stderr) {
      if (error) {
        return cb(stderr);
      }
      return cb(null, parseLDIF(stdout));
    }
  );
}

//============================================================================//

function checkLogin(callsign, password, attributes, cb) {
  if (typeof attributes === 'function') {
    cb = attributes;
    attributes = defaultAttributes;
  }

  if (callsign.length <= 0) { return cb(Error('invalid username')); }
  if (password.length <= 0) { return cb(Error('invalid password')); }

  getUserInfoByCallsign(callsign, ['dn'], function(err, data) {
    if (err) {
      return cb(Error('could not find the username: "' + callsign + '"'));
    }

    var filter = '(sAMAccountName=' + callsign + ')';

    //
    //  Note:  binding to the LDAP server with the user's distinguished
    //         name (DN) and their password is the authentication mechanism.
    //

    runQuery(data.dn, password, filter, attributes, function(err, data) {
      if (err) {
        return cb(err);
      }
      else if (!data) {
        return cb(Error('no authorization'));
      }
      else if (data.length !== 1) {
        return cb(Error('invalid entry count: ' + table.length));
      }
      else if (!data[0].employeeNumber) {
        return cb(Error('no employeeNumber'));
      }
      else {
        return cb(null, data[0]);
      }
    });
  });
}

//============================================================================//

function getUserInfo(filter, attributes, cb) {
  runQuery(ldapBindDN, ldapPassword, filter, attributes, function(err, data) {
    if (err) {
      return cb(err);
    }
    if (data.length !== 1) {
      return cb(Error('invalid entry count: ' + data.length));
    }
    return cb(null, data[0]);
  });
}

function getUserInfoByID(employeeNumber, attributes, cb) {
  if (typeof attributes === 'function') {
    cb = attributes;
    attributes = defaultAttributes;
  }
  var filter = '(employeeNumber=' + employeeNumber + ')';
  return getUserInfo(filter, attributes, cb);
}

function getUserInfoByDN(distinguishedName, attributes, cb) {
  if (typeof attributes === 'function') {
    cb = attributes;
    attributes = defaultAttributes;
  }
  var filter = '(distinguishedName=' + distinguishedName + ')';
  return getUserInfo(filter, attributes, cb);
}

function getUserInfoByCallsign(callsign, attributes, cb) {
  if (typeof attributes === 'function') {
    cb = attributes;
    attributes = defaultAttributes;
  }
  var filter = '(sAMAccountName=' + callsign + ')';
  return getUserInfo(filter, attributes, cb);
}

function getUserInfoByFullname(fullName, attributes, cb) {
  if (typeof attributes === 'function') {
    cb = attributes;
    attributes = defaultAttributes;
  }
  var filter = '(name=' + fullName + ')';
  return getUserInfo(filter, attributes, cb);
}

function getUserInfoByEmail(email, attributes, cb) {
  if (typeof attributes === 'function') {
    cb = attributes;
    attributes = defaultAttributes;
  }
  var filter = '(mail=' + email + ')';
  return getUserInfo(filter, attributes, cb);
}

//============================================================================//

function getUserList(attributes, cb) {
  if (typeof attributes === 'function') {
    cb = attributes;
    attributes = defaultAttributes;
  }
  var filter = '(&(name=*)(employeeNumber=*))';
  runQuery(ldapBindDN, ldapPassword, filter, attributes, cb);
}

//============================================================================//

function parseLDIF(ldifText) {

  var entries = [];

  var dn = null;
  var attr = {};

  function addEntry() {
    if (dn) {
      attr.dn = dn;
      entries.push(attr);
    }
    dn = null;
    attr = {};
  }

  ldifText.toString().split('\n').forEach(function(line) {
    if (line.match(/^\s*#/)) { // comment
      return;
    }
    if (line.match(/^\s*$/)) { // blank line
      addEntry();
      return;
    }
    var matches = line.match('^([^:]+): (.*)$')
    if (!matches) {
      return;
    }

    var name  = matches[1]
      , value = matches[2];
    if (name == 'dn') {
      addEntry();
      dn = value;
      attr = { dn: dn };
    }
    else {
      var oldval = attr[name];
      if (!oldval) {
        attr[name] = value;
      }
      else if (oldval instanceof Array) {
        oldval.push(value);
      }
      else {
        attr[name] = [ oldval, value ];
      }
    }
  });

  addEntry(); // in case a trailing newline was missed

  return entries;
}

//============================================================================//
//============================================================================//
