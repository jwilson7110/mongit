//============================================================================//
//
//  Just adds a couple of utility functions
//
//    db.queryData(queryStr, function(err, data) {
//      var fields     = data.fields;
//      var field0     = data.fields[0];
//      var rows       = data.rows;
//      var row0       = data.rows[0];
//      var namedValue = data.rows[0].fieldName;
//
//      var noNulls = true; // optional parameter
//
//      var map0 = data.rows[0].toMap([noNulls]);
//      // { name: value, ...}
//
//      var array = data.toArray([index=0]);
//      // [ value0, value1, ... ]
//
//      var rowMaps = data.toMaps([noNulls]);
//      // [ { name: value, ... }, ... ]
//
//      var mapMaps = data.toMapMaps(index [,noNulls]);       // NOTE: lossy
//      // { index0: { index: index0, param: value, ... }, ... }
//
//      var mapArrays = data.toMapArrays(index);              // NOTE: lossy
//      // { index0: [ index0, value1, value2, ... ], ... }
//
//      var collateMaps = data.collateMaps(index, [,noNulls]);
//      // { index0: [ {}, {}, ... ], ... }
//
//      var collateArrays = data.collateArrays(index);
//      // { index0: [ [], [], ... ], ... }


var mysql = require('mysql');

var colors = require('colors');

//============================================================================//

var noop = function() {};
var debugInput  = noop;
var debugOutput = noop;
(function() {
  if (process.env.MYSQL_DEBUG_IN) {
    debugInput = console.log;
  }
  if (process.env.MYSQL_DEBUG_OUT) {
    debugOutput = console.log;
  }
  if (process.env.MYSQL_DEBUG) {
    debugInput = console.log;
    debugOutput = console.log;
  }
})();

//============================================================================//

var connectionCount = 0;

exports.getConnectionCount = function() {
  return connectionCount;
}

//============================================================================//

exports.isMySQLClient = function(x) {
  return (x instanceof mysql.Client) && !!x.transaction;
}

//============================================================================//

exports.createClient = function(options) {

  var client = mysql.createClient(options);

  connectionCount++;

  client.oldQuery = client.query;

  client.queryData = function(qStr, cb) {
    debugInput('GENNUM-MYSQL-IN', qStr);
    client.oldQuery(qStr, function(err, results, fields) {
      if (err) {
        debugOutput('GENNUM-MYSQL-ERROR', qStr);
        return cb(err);
      }
      var data = simplifyResults(results, fields);
      debugOutput('GENNUM-MYSQL-OUT', data);
      return cb(null, data);
    });
  }

  client.query = null;

  client.fieldMap = fieldMap;

  client.transaction = transaction;

  client.inTransaction = inTransaction;

  client.lastInsertID = lastInsertID;

  client.query1Row = query1Row;

  client.query1Value = query1Value;

  var oldEnd = client.end;
  client.end = function() {
    connectionCount--;
    var depth = client.transactionDepth;
    if (depth) {
      var msg = 'DB client end() with transactionDepth = ' + depth;
      console.log(msg.bold.red);
    }
    oldEnd.apply(client, arguments);
  }

  return client;
}

//============================================================================//

function fieldMap(fields) {
  var t = {};
  for (var i = 0; i < fields.length; i++) {
    t[fields[i]] = i;
  }
  return t;
}

//============================================================================//

function findIndex(data, index, def) {
  var type = typeof(index);
  if ((type === 'undefined') || (index === null)) {
    return null;
  }
  else if (type === 'number') {
    if ((index < 0) || (index >= data.fields.length)) {
      return null;
    }
    return index;
  }
  else if (type === 'string') {
    index = data.fieldMap[index];
    if (typeof(index) !== 'number') {
      return null;
    }
    return index;
  }
  return null;
}

//============================================================================//

function find(index, value) {
  index = findIndex(this, index);
  if (index === null) {
    return null;
  }
  var rows = this.rows;
  var len = rows.length;
  for (var r = 0; r < len; r++) {
    if (rows[r][index] === value) {
      return index;
    }
  }
  return null;
}

//============================================================================//

function toArray(index) { // data function
  if (typeof(index) === 'undefined') {
    index = 0;
  } else {
    index = findIndex(this, index);
  }
  if (index === null) {
    return null;
  }

  var array = [];
  var rows = this.rows;
  var len = rows.length;
  for (var r = 0; r < len; r++) {
    array.push(rows[r][index]);
  }
  return array;
}

function toMaps(noNulls) { // data function
  var rows = this.rows;
  var len = rows.length;
  var maps = [];
  for (var r = 0; r < len; r++) {
    maps.push(rows[r].toMap(noNulls));
  }
  return maps;
}

function toMapMaps(index, noNulls) { // data function
  index = findIndex(this, index);
  if (index === null) {
    return null;
  }
  var rows = this.rows;
  var len = rows.length;
  var mapMaps = {};
  for (var r = 0; r < len; r++) {
    var row = rows[r];
    var key = row[index];
    mapMaps[key] = row.toMap(noNulls);
  }
  return mapMaps;
}

function toMapArrays(index) { // data function
  index = findIndex(this, index);
  if (index === null) {
    return null;
  }
  var rows = this.rows;
  var len = rows.length;
  var mapArrays = {};
  for (var r = 0; r < len; r++) {
    var row = rows[r];
    var key = row[index];
    mapArrays[key] = row;
  }
  return mapArrays;
}

function collateArrays(index) {
  index = findIndex(this, index);
  if (index === null) {
    return null;
  }
  var map = {};
  var rows = this.rows;
  var len = rows.length;
  for (var r = 0; r < len; r++) {
    var row = rows[r];
    var key = row[index];
    var array = map[key] || [];
    map[key] = array;
    array.push(row)
  }
  return map;
}

function collateMaps(index, noNulls) {
  index = findIndex(this, index);
  if (index === null) {
    return null;
  }
  var map = {};
  var rows = this.rows;
  var len = rows.length;
  for (var r = 0; r < len; r++) {
    var row = rows[r];
    var key = row[index];
    var array = map[key] || [];
    map[key] = array;
    array.push(row.toMap(noNulls))
  }
  return map;
}

//============================================================================//

function pushMap(map) {
  var table = this;
  var fields = table.fields;
  var length = fields.length;
  var newRow = [];
  for (var f = 0; f < length; f++) {
    newRow.push(map[fields[f]]);
  }
  newRow.__proto__ = table.rowProto;
  table.rows.push(newRow);
}

function pushArray(array) {
  var table = this;
  var fields = table.fields;
  var length = fields.length;
  var newRow = [];
  for (var i = 0; i < length; i++) {
    newRow.push(array[i]);
  }
  newRow.__proto__ = table.rowProto;
  table.rows.push(newRow);
}

//============================================================================//

var tableProto = {
  find:          find,
  toArray:       toArray,
  toMaps:        toMaps,
  toMapMaps:     toMapMaps,
  toMapArrays:   toMapArrays,
  collateMaps:   collateMaps,
  collateArrays: collateArrays,
  pushMap:       pushMap,
  pushArray:     pushArray,
}

//============================================================================//

function simplifyResults(results, resFields) {

  var table = {
    fields: [],
    rows:   [],
  };
  var fields = table.fields;
  var rows   = table.rows;

  if (typeof(results.insertId) !== 'undefined') {
    table.insertId = results.insertId;
  }
  if (typeof(results.affectedRows) !== 'undefined') {
    table.affectedRows = results.affectedRows;
  }

  var fieldMap = {};
  Object.defineProperty(table, 'fieldMap', {
    value: fieldMap,
    enumerable: false,
  });
  var rowProto = {};
  Object.defineProperty(table, 'rowProto', {
    value: rowProto,
    enumerable: false,
  });


  table.__proto__ = tableProto;

  // setup row prototype for named access
  function makeGetter(index) {
    return function() { return this[index]; }
  }

  // setup the fields
  for (field in resFields) {
    var index = fields.length;
    fields.push(field);
    fieldMap[field] = index;
    rowProto.__defineGetter__(field, makeGetter(index));
  }

  rowProto.toMap = function(noNulls) {
    var map = {};
    for (var i = 0; i < fields.length; i++) {
      if (!noNulls || (this[i] !== null)) {
        map[fields[i]] = this[i];
      }
    }
    return map;
  }

  // setup the rows
  var rowCount = results.length;
  for (var r = 0; r < rowCount; r++) {
    var oldRow = results[r];
    var newRow = [];
    for (var f = 0; f < fields.length; f++) {
      newRow.push(oldRow[fields[f]]);
    }
    newRow.__proto__ = rowProto;
    rows.push(newRow);
  }

  return table;
}

//============================================================================//

function transaction(fn, cb) {
  var client = this;

  if (!client.transactionDepth) {
    client.transactionDepth = 0;
  }

  client.transactionDepth++;

  if (client.transactionDepth > 1) {
    return fn(function(err, data) {
      client.transactionDepth--;
      return cb(err, data);
    });
  }

  // (transactionDepth === 1), start the transaction

  client.queryData('START TRANSACTION', function(err) {
    if (err) {
      client.transactionDepth--;
      return cb(err);
    }
    fn(function(err, data) {
      client.transactionDepth--;
      if (client.transactionDepth !== 0) {
        var msg = 'invalid final transactionDepth: ' + client.transactionDepth;
        console.log(msg.bold.red);
        client.transactionDepth = 0; // reset?
      }
      if (err) {
        return client.queryData('ROLLBACK', function() {
          return cb(err); // ignoring the 'ROLLBACK' error
        });
      }
      else {
        return client.queryData('COMMIT', function(err) {
          return cb(err, data); // ignoring the 'COMMIT' data
        });
      }
    });
  });
}

//============================================================================//

function inTransaction() {
  var depth = this.transactionDepth;
  return ((typeof(depth) === 'number') && (depth > 0));
}

//============================================================================//

var lastInsertStr = 'SELECT LAST_INSERT_ID() AS id';

function lastInsertID(cb) {
  var msg = 'lastInsertID() is deprecated, use data.insertId instead';
  console.log(msg.bold.red);

  var client = this;
  client.queryData(lastInsertStr, function(err, data) {
    if (err) {
      return cb(err);
    }
    if (data.rows.length === 1) {
      return cb(null, data.rows[0].id);
    }
    return cb(Error('missing last-insert-id'));
  });
}

//============================================================================//

function query1Row(qStr, cb) {
  var client = this;
  client.queryData(qStr, function(err, data) {
    if (err) {
      return cb(err);
    }
    if (data.rows.length !== 1) {
      return cb(Error('expected 1 row, got ' + data.rows.length));
    }
    return cb(null, data.rows[0]);
  });
}

//============================================================================//

function query1Value(qStr, cb) {
  var client = this;
  client.query1Row(qStr, function(err, data) {
    if (err) {
      return cb(err);
    }
    return cb(null, data[0]);
  });
}

//============================================================================//
