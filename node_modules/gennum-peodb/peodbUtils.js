//============================================================================//

exports.checkArgs = checkArgs;

exports.isDraftTPrev   = isDraftTPrev;

exports.createObject = createObject;
exports.createStep   = createStep;

exports.getTPsetStepID = getTPsetStepID;
exports.getTPStepID    = getTPStepID;
exports.getTPrevStepID = getTPrevStepID;

exports.getObjectID           = getObjectID; // NOTE: reassigned below
exports.getPartflowObjectID   = getPartflowObjectID;
exports.getPartObjectID       = getPartObjectID;
exports.getStepObjectID       = getStepObjectID;
exports.getTPsetObjectID      = getTPsetObjectID;
exports.getTPObjectID         = getTPObjectID;
exports.getTPrevObjectID      = getTPrevObjectID;
exports.getFabProcessObjectID = getFabProcessObjectID;

exports.getSubObjectIDs = getSubObjectIDs;

//==========================================================================//

function checkArgs(reqArgs, haveArgs) {
  for (var i = 0; i < reqArgs.length; i++) {
    var reqArg = reqArgs[i];
    if (typeof(haveArgs[reqArg]) === 'undefined') {
      return reqArg;
    }
  }
  return null;
}

function isDraftTPrev(args, cb) {
  var missing = checkArgs(['db', 'tp_rev_id'], args);
  if (missing) {
    return cb(Error('missing the ' + missing + ' argument'));
  }

  var qStr =
    'SELECT state'
  + ' FROM tp_revs'
  + ' WHERE tp_rev_id = ' + db.escape(args.tp_rev_id)
  ;
  db.query1Value(qStr, function(err, state) {
    if (err) {
      return cb(err);
    }
    return cb(null, (state === 'DRAFT'));
  });
}

//============================================================================//
//============================================================================//

function createObject(db, type, user_id, cb) {
  type = db.escape(type);
  var qStr =
    'INSERT INTO objects'
  + ' (object_id, object_type_id, create_user_id, create_time)'
  + ' VALUES '
  + '(NULL'
  + ',(SELECT object_type_id FROM object_types WHERE name = ' + type + ')'
  + ',' + db.escape(user_id)
  + ',UNIX_TIMESTAMP()'
  + ')'
  ;
  db.queryData(qStr, function(err, data) {
    if (err) {
      return cb(err);
    }
    return cb(null, data.insertId); // returning the object_id
  });
}

//============================================================================//

function createStep(db, type, user_id, cb) {
  createObject(db, 'step', user_id, function(err, object_id) {
    if (err) {
      return cb(err);
    }
    type = db.escape(type);
    var qStr =
      'INSERT INTO steps (step_id, object_id, step_type_id, state)'
    + ' VALUES ('
    + 'NULL'
    + ',' + db.escape(object_id)
    + ',(SELECT step_type_id FROM step_types WHERE step_abbr = ' + type + ')'
    + ',"ACTIVE"'
    + ')'
    ;
    db.queryData(qStr, function(err, data) {
      if (err) {
        return cb(err);
      }
      return cb(null, data.insertId); // returning the step_id
    });
  });
}

//============================================================================//
//============================================================================//

function getTPsetStepID(db, tp_set_id, cb) {
  tp_set_id = db.escape(tp_set_id);
  var qStr =
    'SELECT step_id' + ' FROM tp_sets' + ' WHERE tp_set_id = ' + tp_set_id;
  db.query1Value(qStr, cb);
}

function getTPStepID(db, tp_id, cb) {
  tp_id = db.escape(tp_id);
  var qStr =
    'SELECT step_id' + ' FROM tps' + ' WHERE tp_id = ' + tp_id;
  db.query1Value(qStr, cb);
}

function getTPrevStepID(db, tp_rev_id, cb) {
  tp_rev_id = db.escape(tp_rev_id);
  var qStr =
    'SELECT step_id' + ' FROM tp_revs' + ' WHERE tp_rev_id = ' + tp_rev_id;
  db.query1Value(qStr, cb);
}

//============================================================================//
//============================================================================//

var getObjectID;

(function() {
  var typeMap = {
    partflow:    { table: 'partflows',     field: 'partflow_id'    },
    part:        { table: 'parts',         field: 'part_id'        },
    step:        { table: 'steps',         field: 'step_id'        },
    fab_process: { table: 'fab_processes', field: 'fab_process_id' },
    tp_set:      { table: 'tp_sets',       field: 'tp_set_id',  stepped: true },
    tp:          { table: 'tps',           field: 'tp_id',      stepped: true },
    tp_rev:      { table: 'tp_revs',       field: 'tp_rev_id',  stepped: true },
  };
  getObjectID = function(db, type, id, cb) {
    var info = typeMap[type];
    if (!info) {
      return cb(Error('invalid object type: ' + type));
    }
    var id = db.escape(id);
    var table = info.table;
    var field = info.field;
    var qStr;
    if (!info.stepped) {
      qStr = 'SELECT object_id FROM ' + table + ' WHERE ' + field + ' = ' + id;
    }
    else {
      qStr =
        'SELECT object_id'
      + ' FROM steps s'
      + ' JOIN ' + table + ' t ON (t.step_id = s.step_id)'
      + ' WHERE ' + field + ' = ' + id
      ;
    }
    db.query1Value(qStr, cb);
  }
})();

exports.getObjectID = getObjectID;

//============================================================================//

function getPartflowObjectID(db, partflow_id, cb) {
  getObjectID(db, 'partflow', partflow_id, cb);
}

function getPartObjectID(db, part_id, cb) {
  getObjectID(db, 'part', part_id, cb);
}

function getStepObjectID(db, step_id, cb) {
  getObjectID(db, 'step', step_id, cb);
}

function getFabProcessObjectID(db, fab_process_id, cb) {
  getObjectID(db, 'fab_process', fab_process_id, cb);
}

function getTPsetObjectID(db, tp_set_id, cb) {
  getObjectID(db, 'tp_set', tp_set_id, cb);
}

function getTPObjectID(db, tp_id, cb) {
  getObjectID(db, 'tp', tp_id, cb);
}

function getTPrevObjectID(db, tp_rev_id, cb) {
  getObjectID(db, 'tp_rev', tp_rev_id, cb);
}

//==========================================================================//
//==========================================================================//
//
//  partflows -> parts and steps
//  tp_sets   -> tps
//  tps       -> tp_revs
//

function getSubObjectIDs(db, object_id, cb) {
  var qStr =
    'SELECT'
  + '  pf.partflow_id, ts.tp_set_id, tp.tp_id'
  + ' FROM objects o'
  + '  LEFT JOIN partflows pf ON (pf.object_id = o.object_id)'
  + '  LEFT JOIN steps     s  ON (s.object_id  = o.object_id)'
  + '  LEFT JOIN tp_sets   ts ON (ts.step_id = s.step_id)'
  + '  LEFT JOIN tps       tp ON (tp.step_id = s.step_id)'
  + ' WHERE o.object_id = ' + db.escape(object_id)
  ;
  db.queryData(qStr, function(err, data) {
    if (err) {
      return cb(err);
    }
    if (data.rows.length >= 2) {
      return cb(Error('too many matches for object_id: ' + object_id));
    }
    if (data.rows.length <= 0) {
      return cb(null, []);
    }

    var row = data.rows[0];
    if (row.tp_set_id) {
      qStr =
        'SELECT s.object_id'
      + ' FROM tp_sets ts'
      + ' JOIN tps     tp ON (tp.tp_set_id = ts.tp_set_id)'
      + ' JOIN steps   s  ON (s.step_id = tp.step_id)'
      + ' WHERE ts.tp_set_id = ' + db.escape(row.tp_set_id)
      ;
    }
    else if (row.tp_id) {
      qStr =
        'SELECT s.object_id'
      + ' FROM tps     tp'
      + ' JOIN tp_revs tr ON (tr.tp_id = tp.tp_id)'
      + ' JOIN steps   s  ON (s.step_id = tr.step_id)'
      + ' WHERE tp.tp_id = ' + db.escape(row.tp_id)
      ;
    }
    else if (row.partflow_id) {
      var partflow_id = db.escape(row.partflow_id);
      qStr =
        '  SELECT p.object_id'
      + '   FROM partflow_parts pfp'
      + '    JOIN parts p ON (p.part_id = pfp.part_id)'
      + '   WHERE pfp.partflow_id = ' + partflow_id
      + ' UNION'
      + '  SELECT s.object_id'
      + '   FROM partflow_steps pfs'
      + '    JOIN steps s ON (s.step_id = pfs.step_id)'
      + '   WHERE pfs.partflow_id = ' + partflow_id
      ;
    }
    else {
      return cb(null, []);
    }

    db.queryData(qStr, function(err, data) {
      if (err) {
        return cb(err);
      }
      return cb(null, data.toArray(0));
    });
  });
}

//==========================================================================//
//==========================================================================//
