################################################################################
#
#  PEODB Initial Data
#

################################################################################
#
#  Configuration data
#

INSERT INTO config (`key`,`value`) VALUES
  ('version',         '1.0.0')
, ('load_time',       UNIX_TIMESTAMP())
, ('tp_svn_root_url', 'http://dmsrv.gennum.com:8420/')
, ('sftp_account',    'production')
;

################################################################################
#
#  Email types
#

INSERT INTO email_types(`email_type`) VALUES
  ('ROLE_CHANGE')
, ('ROLE_CREATE')
, ('TP_REV_STATE_CHANGE')
;

################################################################################
#
#  System users  (not associated to LDAP accounts)
#
#  NOTE: per-user admin accounts are assigned using: bin/load-admins.js
#

INSERT INTO users(user_id, ldap_id, name, callsign) VALUES
  ( -1, NULL, 'PEO', 'peo')
, ( -2, NULL, 'PRU', 'pru')
, ( -3, NULL, 'YDB', 'ydb')
;

# add the guest/guest account
INSERT INTO users (user_id, name, callsign, title, state)
VALUES (123456789, 'guest', 'guest', 'guest account', 'ACTIVE');

INSERT INTO user_hashes (user_id, passtime, passhash)
VALUES (123456789, UNIX_TIMESTAMP(),
  'e3a63b0fb1480f48753e7a97035d76a4c3c087a0e96db196241877692fb8fd67'
);

################################################################################

INSERT INTO object_types (
  `object_type_id`, `name`, `description`, `table_name`, `id_name`
) VALUES
  (NULL, 'partflow',    'Partflow',            'partflows',     'partflow_id')
, (NULL, 'part',        'Part',                'parts',         'part_id')
, (NULL, 'step',        'Process Step',        'steps',         'step_id')
, (NULL, 'fab_process', 'Fabrication Process', 'fab_processes', 'fab_process_id')
# - NOTE: the Test Program types have object associations through their steps
;

################################################################################

DELIMITER //

CREATE FUNCTION `createObject` (typeName VARCHAR(16), unixTime INT UNSIGNED)
  RETURNS INT UNSIGNED
  LANGUAGE SQL
  DETERMINISTIC
BEGIN
  DECLARE objTypeID INT;
  SELECT object_type_id FROM object_types WHERE name = typeName INTO objTypeID;
  INSERT INTO objects
    (object_id, object_type_id, create_user_id, create_time) VALUES
    (NULL, objTypeID, -1, unixTime);

  RETURN LAST_INSERT_ID();
END //

DELIMITER ;


################################################################################
#
#  Note that tp_revs which require trial-runs go straight from RELEASING
#  to TRIAL_RUN, and never sit in the RELEASED state (so RELEASED truly is
#  a terminal state).
#

INSERT INTO tp_rev_states (
  `name`, `display_order`, `terminal`, `automated`, `description`
)
VALUES
  ('DRAFT',          1.0, FALSE, FALSE, 'Draft Test Program Revision')
, ('AUTO_AUDIT',     2.0, FALSE,  TRUE, 'Automated audits')
, ('AUDITING',       3.0, FALSE, FALSE, 'Manual audits')
, ('SIGNOFFS',       4.0, FALSE, FALSE, 'Release signoffs')
, ('RELEASING',      5.0, FALSE,  TRUE, 'Automated release mechanisms')
, ('COMPLETED',      6.0,  TRUE, FALSE, 'Completed Release Candidate')
, ('RELEASED',       7.0,  TRUE, FALSE, 'Package is on the SFTP server')
, ('TRIAL_RUN',      8.0, FALSE, FALSE, 'External Trial Run is in progress')
, ('TR_AUTO_AUDIT',  9.0, FALSE,  TRUE, 'External Trial Run automated audits')
, ('TR_AUDITING',   10.0, FALSE, FALSE, 'External Trial Run manual audits')
, ('TR_SIGNOFFS',   11.0, FALSE, FALSE, 'External Trial Run signoffs for Production')
, ('PRODUCTION',    12.0,  TRUE, FALSE, 'Production Program')
, ('OBSOLETE',      50.0,  TRUE, FALSE, 'Was once Production, but is no more')
, ('CANCELED',      99.0,  TRUE, FALSE, 'Manually canceled')
;

################################################################################
#
# Companies
#

INSERT INTO companies SET name='Gennum';
INSERT INTO companies SET name='Gennum Ottawa';
INSERT INTO companies SET name='Gennum Burlington';
INSERT INTO companies SET name='Verigy';
INSERT INTO companies SET name='LTX';
INSERT INTO companies SET name='Teradyne';
INSERT INTO companies SET name='ASE';
INSERT INTO companies SET name='ASEK';
INSERT INTO companies SET name='ASEM';
INSERT INTO companies SET name='ASESG';
INSERT INTO companies SET name='ASET';
INSERT INTO companies SET name='Giga';
INSERT INTO companies SET name='ISE';
INSERT INTO companies SET name='SPIL';
INSERT INTO companies SET name='KYEC';
INSERT INTO companies SET name='SDT';
INSERT INTO companies SET name='Chartered';
INSERT INTO companies SET name='Chartered Fab2';
INSERT INTO companies SET name='Chartered Fab3';
INSERT INTO companies SET name='UMC';
INSERT INTO companies SET name='UMC FAB-8C';
INSERT INTO companies SET name='UMC FAB-8D';
INSERT INTO companies SET name='UMC FAB-8S';
INSERT INTO companies SET name='UMC FAB-12A';
INSERT INTO companies SET name='ST';
INSERT INTO companies SET name='ST Crolles1';
INSERT INTO companies SET name='TowerJazz';
INSERT INTO companies SET name='TowerJazz Fab3';
INSERT INTO companies SET name='MOSIS/IBM Burlington';
INSERT INTO companies SET name='A5 Unitive A5';
INSERT INTO companies SET name='IZM Berlin';
INSERT INTO companies SET name='UAT';
INSERT INTO companies SET name='ON Fab9';
INSERT INTO companies SET name='X-FAB Lubbock';
INSERT INTO companies SET name='Albis Ruschlikon';
INSERT INTO companies SET name='TSMC';
INSERT INTO companies SET name='TSMC Fab14';

# ate_vendors
INSERT INTO ate_vendors SELECT company_id FROM companies WHERE name='Verigy';
INSERT INTO ate_vendors SELECT company_id FROM companies WHERE name='LTX';
INSERT INTO ate_vendors SELECT company_id FROM companies WHERE name='Teradyne';
INSERT INTO ate_vendors SELECT company_id FROM companies WHERE name='Gennum';

# bump houses
INSERT INTO bump_houses SELECT company_id FROM companies WHERE name='SPIL';

# assembly houses
INSERT INTO assembly_houses SELECT company_id FROM companies WHERE name='ASEM';
INSERT INTO assembly_houses SELECT company_id FROM companies WHERE name='SPIL';

# test houses
INSERT INTO test_houses (company_id, sftp_account, tweak_program) VALUES
  ((SELECT company_id FROM companies WHERE name='Gennum Ottawa'),     'gennum_ott', NULL)
, ((SELECT company_id FROM companies WHERE name='Gennum Burlington'), 'gennum_bur', NULL)
, ((SELECT company_id FROM companies WHERE name='ASET'),              'aset',       NULL)
, ((SELECT company_id FROM companies WHERE name='ASEM'),              'asem',       NULL)
, ((SELECT company_id FROM companies WHERE name='Giga'),              'giga',       NULL)
, ((SELECT company_id FROM companies WHERE name='SPIL'),              'spil',       NULL)
, ((SELECT company_id FROM companies WHERE name='TSMC'),              'tsmc',       NULL)
, ((SELECT company_id FROM companies WHERE name='ISE'),               'ise',        NULL)
;



# foundries (along with their abbreviations)
INSERT INTO foundries SELECT company_id,'S0' FROM companies WHERE name='SDT';
INSERT INTO foundries SELECT company_id,'K0' FROM companies WHERE name='Chartered Fab2';
INSERT INTO foundries SELECT company_id,'L0' FROM companies WHERE name='Chartered Fab3';
INSERT INTO foundries SELECT company_id,'C0' FROM companies WHERE name='UMC FAB-8C';
INSERT INTO foundries SELECT company_id,'D0' FROM companies WHERE name='UMC FAB-8D';
INSERT INTO foundries SELECT company_id,'G0' FROM companies WHERE name='UMC FAB-8S';
INSERT INTO foundries SELECT company_id,'T0' FROM companies WHERE name='UMC FAB-12A';
INSERT INTO foundries SELECT company_id,'B0' FROM companies WHERE name='ST Crolles1';
INSERT INTO foundries SELECT company_id,'H0' FROM companies WHERE name='TowerJazz Fab3';
INSERT INTO foundries SELECT company_id,'R0' FROM companies WHERE name='MOSIS/IBM Burlington';
INSERT INTO foundries SELECT company_id,'U0' FROM companies WHERE name='A5 Unitive A5';
INSERT INTO foundries SELECT company_id,'F0' FROM companies WHERE name='IZM Berlin';
INSERT INTO foundries SELECT company_id,'A0' FROM companies WHERE name='UAT';
INSERT INTO foundries SELECT company_id,'M0' FROM companies WHERE name='ON Fab9';
INSERT INTO foundries SELECT company_id,'X0' FROM companies WHERE name='X-FAB Lubbock';
INSERT INTO foundries SELECT company_id,'E0' FROM companies WHERE name='Albis Ruschlikon';
INSERT INTO foundries SELECT company_id,'W0' FROM companies WHERE name='TSMC Fab14';

# Gennum parent company
SELECT company_id FROM companies WHERE name='Gennum' INTO @companyID;
UPDATE companies SET parent_company_id=@companyID WHERE name LIKE 'Gennum %';

# UMC parent company
SELECT company_id FROM companies WHERE name='UMC' INTO @companyID;
UPDATE companies SET parent_company_id=@companyID WHERE name LIKE 'UMC %';

# ASE parent company
SELECT company_id FROM companies WHERE name='ASE' INTO @companyID;
UPDATE companies SET parent_company_id=@companyID WHERE name LIKE 'ASE_%';

# Chartered parent company
SELECT company_id FROM companies WHERE name='Chartered' INTO @companyID;
UPDATE companies SET parent_company_id=@companyID WHERE name LIKE 'Chartered %';

# TSMC parent company
SELECT company_id FROM companies WHERE name='TSMC' INTO @companyID;
UPDATE companies SET parent_company_id=@companyID WHERE name LIKE 'TSMC %';

# ST parent company
SELECT company_id FROM companies WHERE name='ST' INTO @companyID;
UPDATE companies SET parent_company_id=@companyID WHERE name LIKE 'ST %';

# TowerJazz parent company
SELECT company_id FROM companies WHERE name='TowerJazz' INTO @companyID;
UPDATE companies SET parent_company_id=@companyID WHERE name LIKE 'TowerJazz %';

################################################################################
#
#  Contacts
#
#  (note that company_liaisons can't be inserted until we have the user_id's)
#

INSERT INTO contacts(contact_id, name, phone, mobile, email, fax, company_id)
VALUES
  (NULL, "Alan Li", NULL, NULL, "alan@hs.spil.com.tw", NULL, -- FIXME - phone
    (SELECT company_id FROM companies WHERE name = 'SPIL'))
, (NULL, "Iris Chou", NULL, NULL, "iris_chou@giga-solution.com", NULL, -- FIXME - phone
    (SELECT company_id FROM companies WHERE name = 'Giga'))
, (NULL, "Eddy Wu", NULL, NULL, "eddy_wu@giga-solution.com", NULL, -- FIXME - phone
    (SELECT company_id FROM companies WHERE name = 'Giga'))
;

################################################################################
#
#  ATEs
#

INSERT INTO ate_types(
  `ate_type_id`, `brief`, `description`, `abbr`, `svn_root`, `company_id`
) VALUES
  (NULL, 'LTX HFI',  'LTX Fusion',
  'L', 'FUSION/', (SELECT company_id FROM companies WHERE name = 'LTX'))

, (NULL, 'iFLEX',    'Teradyne iFLEX',
  'F', 'IFLEX/',  (SELECT company_id FROM companies WHERE name = 'Teradyne'))

, (NULL, 'VSingle',  'Verigy Single Density C-series, P-series, NP',
  'S', 'V93K/',   (SELECT company_id FROM companies WHERE name = 'Verigy'))

, (NULL, 'V93K',     'Verigy Pin Scale PS400, PS800, PS3600',
  'P', 'V93K/',   (SELECT company_id FROM companies WHERE name = 'Verigy'))

, (NULL, 'NoseCone', 'Gennum Custom Tester setup',
  'N', NULL,      (SELECT company_id FROM companies WHERE name = 'Gennum'))

, (NULL, 'N/A',      'Not test platform specific',
  'Z', NULL,      (SELECT company_id FROM companies WHERE name = 'Gennum'))
;


SELECT ate_type_id FROM ate_types WHERE brief = 'V93K' INTO @V93K_ate_type_id;

INSERT INTO ate_sw_versions (`ate_sw_version_id`, `ate_type_id`, `version`)
  VALUES
  (NULL, @V93K_ate_type_id, 'SmarTest 6.3.2')
, (NULL, @V93K_ate_type_id, 'SmarTest 6.5.0')
, (NULL, @V93K_ate_type_id, 'SmarTest 6.5.2')
, (NULL, @V93K_ate_type_id, 'SmarTest 6.5.3')
, (NULL, @V93K_ate_type_id, 'SmarTest 6.5.4')
, (NULL, @V93K_ate_type_id, 'SmarTest 7.0.1')
, (NULL, @V93K_ate_type_id, 'SmarTest 7.0.3')
, (NULL, @V93K_ate_type_id, 'SmarTest 7.0.4')
, (NULL, @V93K_ate_type_id, 'SmarTest 7.1.0')
, (NULL, @V93K_ate_type_id, 'SmarTest 7.1.1')
, (NULL, @V93K_ate_type_id, 'SmarTest 7.1.2')
, (NULL, @V93K_ate_type_id, 'SmarTest 7.1.3')
;

INSERT INTO ate_os_versions (`ate_os_version_id`, `ate_type_id`, `version`)
  VALUES
  (NULL, @V93K_ate_type_id, 'RedHat 5.0 (EL)')
;

################################################################################
#
#  Part families -- FIXME not used yet
#

#INSERT INTO part_families(`part_family_id`, `name`) VALUES
#  (NULL, 'General')
#, (NULL, 'Backplane')
#, (NULL, 'Backplane and Linecard')
#, (NULL, 'Broadcast')
#, (NULL, 'Broadcast Video')
#, (NULL, 'CrossPoint')
#, (NULL, 'LA')
#, (NULL, 'LD')
#, (NULL, 'Module')
#, (NULL, 'Module IC')
#, (NULL, 'Optical IC')
#, (NULL, 'ROSA')
#, (NULL, 'Thunderbolt')
#, (NULL, 'TIA')
#, (NULL, 'Other')
#;

################################################################################

INSERT INTO part_types(`part_type_id`, `name`, `abbr`, `primary_type`) VALUES
  (NULL, "wafer (untested)",                  "WU", "WAFER")
, (NULL, "wafer (tested)",                    "WT", "WAFER")
, (NULL, "wafer (bumped)",                    "WB", "WAFER")
, (NULL, "wafer (redistributed, RDL)",        "WR", "WAFER")
, (NULL, "wafer (thinned/ground)",            "WG", "WAFER")
, (NULL, "wafer (quartered)",                 "WQ", "WAFER")
, (NULL, "wafer (partially processed)",       "WP", "WAFER")
, (NULL, "die (untested)",                    "DU", "DIE")
, (NULL, "die (tested)",                      "DT", "DIE")
, (NULL, "assembly (untested)",               "AU", "ASSEMBLY")
, (NULL, "assembly (tested)",                 "AT", "ASSEMBLY")
, (NULL, "assembly (quality tested)",         "AQ", "ASSEMBLY")
, (NULL, "assembly (partially processed)",    "AP", "ASSEMBLY")
, (NULL, "assembly (blind build)",            "AB", "ASSEMBLY")
, (NULL, "module (untested)",                 "MU", "MODULE")
, (NULL, "module (tested)",                   "MT", "MODULE")
, (NULL, "module (partially processed)",      "MP", "MODULE")
, (NULL, "packed wafer",                      "PW", "PACKED")
, (NULL, "packed dies (reel)",                "PD", "PACKED")
, (NULL, "packed assembly (tube/tray/reel)",  "PA", "PACKED")
, (NULL, "packed module",                     "PM", "PACKED")
, (NULL, "final goods (marketing)",           "FG", "FINAL_GOODS")
, (NULL, "test program",                      "TP", "TEST_PROGRAM")
, (NULL, "package",                           "PK", "PACKAGE")
;

################################################################################

INSERT INTO role_types (
  `role_type_id`, `brief`, `description`, `key_role`, `single_role`, `display_order`
)
VALUES
  (NULL, "PRU",      "PRU Automated Tool",           TRUE,  TRUE,   0.0)
, (NULL, "Admin",    "PEODB Administrator",          TRUE,  TRUE,   1.0)
, (NULL, "Director", "PEO Director",                 TRUE, FALSE,   2.0)
, (NULL, "PkgE_mgr", "Packaging Engineer Manager",   TRUE,  TRUE,   3.0)
, (NULL, "PE_mgr",   "Product Engineer Manager",     TRUE,  TRUE,   4.0)
, (NULL, "TE_mgr",   "Test Engineer Manager",        TRUE,  TRUE,   5.0)
, (NULL, "FabE_mgr", "Fab Engineer Manager",         TRUE,  TRUE,   6.0)
, (NULL, "PkgE",     "Packaging Engineer",           TRUE,  TRUE,   7.0)
, (NULL, "PE",       "Product Engineer",             TRUE,  TRUE,   8.0)
, (NULL, "TE",       "Test Engineer",                TRUE,  TRUE,   9.0)
, (NULL, "AE",       "Audit Engineer",               TRUE,  TRUE,  10.0)
, (NULL, "FabE",     "Fab Engineer",                 TRUE,  TRUE,  11.0)
, (NULL, "Watcher",  "Watcher",                     FALSE, FALSE, 100.0)
;


DELIMITER //

CREATE PROCEDURE `addRoleMasterSlave` (
  IN masterBrief VARCHAR(16)
, IN slaveBrief  VARCHAR(16)
)
  LANGUAGE SQL
  DETERMINISTIC
BEGIN
  INSERT INTO role_controls (`master_role_type_id`, `slave_role_type_id`) VALUES
    ((SELECT role_type_id FROM role_types WHERE brief = masterBrief),
     (SELECT role_type_id FROM role_types WHERE brief = slaveBrief))
  ;
END //

DELIMITER ;


CALL addRoleMasterSlave('Admin',       'TE');
CALL addRoleMasterSlave('Admin',       'PE');
CALL addRoleMasterSlave('Admin',       'AE');
CALL addRoleMasterSlave('Admin',     'FabE');
CALL addRoleMasterSlave('Admin',     'PkgE');
CALL addRoleMasterSlave('Admin',   'TE_mgr');
CALL addRoleMasterSlave('Admin',   'PE_mgr');
CALL addRoleMasterSlave('Admin', 'PkgE_mgr');
CALL addRoleMasterSlave('Admin', 'FabE_mgr');
CALL addRoleMasterSlave('Admin', 'Director');

CALL addRoleMasterSlave('Director',       'TE');
CALL addRoleMasterSlave('Director',       'PE');
CALL addRoleMasterSlave('Director',       'AE');
CALL addRoleMasterSlave('Director',     'PkgE');
CALL addRoleMasterSlave('Director',     'FabE');
CALL addRoleMasterSlave('Director',   'TE_mgr');
CALL addRoleMasterSlave('Director',   'PE_mgr');
CALL addRoleMasterSlave('Director', 'PkgE_mgr');
CALL addRoleMasterSlave('Director', 'FabE_mgr');

CALL addRoleMasterSlave('TE_mgr',     'TE');
CALL addRoleMasterSlave('PE_mgr',     'PE');
CALL addRoleMasterSlave('PE_mgr',     'AE');
CALL addRoleMasterSlave('PkgE_mgr', 'PkgE');
CALL addRoleMasterSlave('FabE_mgr', 'FabE');


DROP PROCEDURE `addRoleMasterSlave`;


################################################################################
#
#  Part properties
#

# find some foundry company_id's, and put them into session variables
SELECT f.company_id FROM foundries f JOIN companies c ON (c.company_id = f.company_id)
  WHERE c.name='TowerJazz Fab3' INTO @fabJazz3;
SELECT f.company_id FROM foundries f JOIN companies c ON (c.company_id = f.company_id)
  WHERE c.name='UMC FAB-8C' INTO @fabUMC8C;
SELECT f.company_id FROM foundries f JOIN companies c ON (c.company_id = f.company_id)
  WHERE c.name='UMC FAB-8D' INTO @fabUMC8D;
SELECT f.company_id FROM foundries f JOIN companies c ON (c.company_id = f.company_id)
  WHERE c.name='UMC FAB-12A' INTO @fabUMC12A;
SELECT f.company_id FROM foundries f JOIN companies c ON (c.company_id = f.company_id)
  WHERE c.name='TSMC Fab14' INTO @fabTSMC14;
SELECT f.company_id FROM foundries f JOIN companies c ON (c.company_id = f.company_id)
  WHERE c.name='ST Crolles1' INTO @fabST1;

INSERT INTO fab_processes (fab_process_id, object_id, name, brief, material, company_id) VALUES
  (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "TowerJazz SiGe 90 SBC 18QLDZ",            "JAZZ_18QLDZ", "BiCMOS", @fabJazz3)
, (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "TowerJazz SiGe 120 SBC 18HA",             "JAZZ_18HA",   "BiCMOS", @fabJazz3)
, (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "TowerJazz SiGe 120 SBC 18HAZ",            "JAZZ_18HAZ",  "BiCMOS", @fabJazz3)
, (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "TowerJazz SiGe 120 SBC 18HXLZ",           "JAZZ_18HXLZ", "BiCMOS", @fabJazz3)
, (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "TowerJazz SiGe 120 SBC 18HXL",            "JAZZ_18HXL",  "BiCMOS", @fabJazz3)
, (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "TowerJazz SiGe 120 spare",                "JAZZ_spare",  "BiCMOS", @fabJazz3)
, (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "TowerJazz SiGe 200 SBC 18H2B",            "JAZZ_18H2B",  "BiCMOS", @fabJazz3)
, (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "TowerJazz SiGe 200 SBC 18H2",             "JAZZ_18H2",   "BiCMOS", @fabJazz3)
, (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "UMC 0.18um CMOS (1P6M, 28 photo layers)", "UMC_1P6M",    "CMOS",   @fabUMC8C)
, (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "UMC 0.13um CMOS (1P8M, 40 photo layers)", "UMC_1P8M",    "CMOS",   @fabUMC8D)
, (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "UMC 90nm CMOS (1P9M, 43 photo layers)",   "UMC_1P9M",    "CMOS",   @fabUMC12A)
, (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "TSMC 40nm (1P10M)",                       "TSMC_1P10M",  "CMOS",   @fabTSMC14)
, (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "TSMC 65nm LP",                            "TSMC_LP",     "CMOS",   @fabTSMC14)
, (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "ST BiCMOS6G (0.35um)",                    "ST_BiCMOS6G", "BiCMOS", @fabST1)
, (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "ST BiCMOS7 (0.25um)",                     "ST_BiCMOS7",  "BiCMOS", @fabST1)
, (NULL, createObject('fab_process', UNIX_TIMESTAMP()), "ST NT35",                                 "ST_NT35",     "BiCMOS", @fabST1)
;

DROP FUNCTION `createObject`;

# wafer sizes

#INSERT INTO wafer_sizes SET name="4\"";
#INSERT INTO wafer_sizes SET name="6\"";
#INSERT INTO wafer_sizes SET name="8\"";
#INSERT INTO wafer_sizes SET name="12\"";
#INSERT INTO wafer_sizes SET name="18\"";

# bump types

#INSERT INTO bump_types SET name="eutectic PbSn";
#INSERT INTO bump_types SET name="unknown";

# bump pitches

#INSERT INTO bump_pitches SET name="150um";
#INSERT INTO bump_pitches SET name="200um";
#INSERT INTO bump_pitches SET name="300um";
#INSERT INTO bump_pitches SET name="400um";
#INSERT INTO bump_pitches SET name="500um";
#INSERT INTO bump_pitches SET name="600um";

# packages -- FIXME

#INSERT INTO package_types SET name="BGA";
#INSERT INTO package_types SET name="DQFP";
#INSERT INTO package_types SET name="LQFP";
#INSERT INTO package_types SET name="MQFP";
#INSERT INTO package_types SET name="TQFP";
#INSERT INTO package_types SET name="SOIC";
#INSERT INTO package_types SET name="PLCC";
#INSERT INTO package_types SET name="SFP";

#INSERT INTO package_types SET name="SOIC N 8L/1.27 UNISEM";
#INSERT INTO package_types SET name="SOIC N 14L/1.27 UNISEM";
#INSERT INTO package_types SET name="SOIC N 16L/1.27 UNISEM";
#INSERT INTO package_types SET name="SOIC 16LW";
#INSERT INTO package_types SET name="PLCC 28L/1.27 UNISEM";
#INSERT INTO package_types SET name="PLCC 44L/1.27 UNISEM";
#INSERT INTO package_types SET name="MQFP 100L";
#INSERT INTO package_types SET name="MQFP 10x10 44L/0.8 ASEK";
#INSERT INTO package_types SET name="MQFP 10x10 44L/0.8 CARSEM";
#INSERT INTO package_types SET name="MQFP 14x20 100L ASEK";
#INSERT INTO package_types SET name="MQFP 14x20 128L/0.8 CARSEM";

# ball pitches -- definitely FIXME

#INSERT INTO ball_pitches SET name="1.00mm";
#INSERT INTO ball_pitches SET name="0.80mm";
#INSERT INTO ball_pitches SET name="0.50mm";
#INSERT INTO ball_pitches SET name="0.40mm";
#INSERT INTO ball_pitches SET name="0.30mm";

################################################################################
#
#  Step types
#

INSERT INTO step_types(`step_type_id`, `step_abbr`, `step_name`) VALUES
  (NULL, 'UK', 'UNKNOWN')
, (NULL, 'NL', 'NULL')
, (NULL, 'FB', 'FABRICATION')
, (NULL, 'DC', 'DICING')
, (NULL, 'BP', 'BUMPING')
, (NULL, 'RD', 'REDISTRIBUTION')
, (NULL, 'TH', 'THINNING')
, (NULL, 'QT', 'QUARTERING')
, (NULL, 'AS', 'ASSEMBLY')
, (NULL, 'RN', 'RENAME')  -- ex: for marketing
, (NULL, 'PK', 'PACKING') -- ex: tape-and-reel
, (NULL, 'TS', 'TEST_PROGRAM_SET')
, (NULL, 'TP', 'TEST_PROGRAM')
, (NULL, 'TR', 'TEST_PROGRAM_REV')
, (NULL, 'VI', 'VISUAL_INSPECTION')
, (NULL, 'PU', 'PURCHASING')
;

################################################################################
#
#  Datalog & Blob types
#

INSERT INTO datalog_types (`datalog_type_id`, `abbr`, `name`) VALUES
  (NULL, 'GOLD', 'Golden Samples')
, (NULL, 'REPT', 'Repeatability')
, (NULL, 'EXTR', 'External Trial Run')
, (NULL, 'OPEN', 'Open Socket')
#, (NULL, 'GTMP', 'Golden Samples (at Temperature)')
#, (NULL, 'RTMP', 'Repeatability (at Temperature)')
#, (NULL, 'ETMP', 'External Trial Run (at Temperature)')
;

INSERT INTO blob_types (`blob_type_id`, `abbr`, `name`) VALUES
  (NULL, 'CUSTOM',  'Custom User File Type')
, (NULL, 'WEM',     'Wafer Exclusion Map')
, (NULL, 'VTT',     'Verigy Test Times')
#, (NULL, 'TTT',     'Teradyne Test Times')
#, (NULL, 'FTT',     'Fusion Test Times')
;

################################################################################
#
#  Test Programs
#
#   <project>_<silicon_rev>_<tp_stage><tp_type><tp_platform>_rev<tp_rev>
#
#     silicon_rev:  RRFF - R=rev, F=foundry_code
#

INSERT INTO tp_types (`tp_type_id`, `abbr`, `req_trial_run`, `description`) VALUES
  (NULL, 'D', FALSE, 'Development')
, (NULL, 'N', FALSE, 'NPI Phase')
, (NULL, 'C', FALSE, 'Characterization')
, (NULL, 'R', FALSE, 'Reliability')
, (NULL, 'S', FALSE, 'Engineering - Sample Screening')
, (NULL, 'X',  TRUE, 'Production - Sample Screening')
, (NULL, 'P',  TRUE, 'Production')
, (NULL, 'Q',  TRUE, 'Quality Control')
, (NULL, 'Z', FALSE, 'Master Test Programs')
;

INSERT INTO tp_stages (`tp_stage_id`, `stage`, `stage_num`, `abbr`, `description`) VALUES
  (NULL, 'W', 1, 'W1', 'Wafer Test Stage 1')
, (NULL, 'W', 2, 'W2', 'Wafer Test Stage 2')
, (NULL, 'W', 3, 'W3', 'Wafer Test Stage 3')
, (NULL, 'W', 4, 'W4', 'Wafer Test Stage 4')
, (NULL, 'W', 5, 'W5', 'Wafer Test Stage 5')
, (NULL, 'W', 6, 'W6', 'Wafer Test Stage 6')
, (NULL, 'W', 7, 'W7', 'Wafer Test Stage 7')
, (NULL, 'W', 8, 'W8', 'Wafer Test Stage 8')
, (NULL, 'W', 9, 'W9', 'Wafer Test Stage 9')
, (NULL, 'F', 1, 'F1', 'Final Test Stage 1')
, (NULL, 'F', 2, 'F2', 'Final Test Stage 2')
, (NULL, 'F', 3, 'F3', 'Final Test Stage 3')
, (NULL, 'F', 4, 'F4', 'Final Test Stage 4')
, (NULL, 'F', 5, 'F5', 'Final Test Stage 5')
, (NULL, 'F', 6, 'F6', 'Final Test Stage 6')
, (NULL, 'F', 7, 'F7', 'Final Test Stage 7')
, (NULL, 'F', 8, 'F8', 'Final Test Stage 8')
, (NULL, 'F', 9, 'F9', 'Final Test Stage 9')
, (NULL, 'S', 1, 'S1', 'System Test Stage 1')
, (NULL, 'S', 2, 'S2', 'System Test Stage 2')
, (NULL, 'S', 3, 'S3', 'System Test Stage 3')
, (NULL, 'S', 4, 'S4', 'System Test Stage 4')
, (NULL, 'S', 5, 'S5', 'System Test Stage 5')
, (NULL, 'S', 6, 'S6', 'System Test Stage 6')
, (NULL, 'S', 7, 'S7', 'System Test Stage 7')
, (NULL, 'S', 8, 'S8', 'System Test Stage 8')
, (NULL, 'S', 9, 'S9', 'System Test Stage 9')
, (NULL, 'Z', 0, 'Z0', 'Master Program - no test stage')
;

################################################################################
################################################################################

DELIMITER //

CREATE PROCEDURE `addAudit` (
  IN  name         VARCHAR(32)
, IN  tpRevState   VARCHAR(16)
, IN  manual       BOOLEAN
, IN  role1        TEXT
, IN  role2        TEXT
, IN  role3        TEXT
, IN  displayOrder FLOAT
)
  LANGUAGE SQL
BEGIN
  DECLARE isSignoff   BOOLEAN;
  DECLARE auditTypeID INT UNSIGNED;

  SELECT tpRevState IN ('SIGNOFFS', 'TR_SIGNOFFS') INTO isSignoff;
  INSERT INTO audit_types (
    `name`, `tp_rev_state`, `is_signoff`, `manual`, `display_order`
  ) VALUES (
    name, tpRevState, isSignoff, manual, displayOrder
  );

  SELECT LAST_INSERT_ID() INTO auditTypeID;

  IF (NOT manual) THEN
    INSERT INTO audit_role_types (`audit_type_id`, `role_type_id`) VALUES
      (auditTypeID, (SELECT role_type_id FROM role_types WHERE brief = 'PRU'));
  END IF;

  IF (NOT role1 IS NULL) THEN
    INSERT INTO audit_role_types (`audit_type_id`, `role_type_id`) VALUES
      (auditTypeID, (SELECT role_type_id FROM role_types WHERE brief = role1));
  END IF;
  IF (NOT role2 IS NULL) THEN
    INSERT INTO audit_role_types (`audit_type_id`, `role_type_id`) VALUES
      (auditTypeID, (SELECT role_type_id FROM role_types WHERE brief = role2));
  END IF;
  IF (NOT role3 IS NULL) THEN
    INSERT INTO audit_role_types (`audit_type_id`, `role_type_id`) VALUES
      (auditTypeID, (SELECT role_type_id FROM role_types WHERE brief = role3));
  END IF;
END //


CREATE PROCEDURE `auditRegExps` (
  IN  aName       VARCHAR(32)
, IN  typeRE       TEXT
, IN  stageRE      TEXT
, IN  ateRE        TEXT
)
  LANGUAGE SQL
BEGIN
  UPDATE audit_types
    SET `tp_type_regexp`  = typeRE,
        `tp_stage_regexp` = stageRE,
        `ate_type_regexp` = ateRE
    WHERE `name` = aName
  ;
END //


CREATE PROCEDURE `auditDesc` (
  IN  aName       VARCHAR(32)
, IN  brief       VARCHAR(64)
, IN  description TEXT
)
  LANGUAGE SQL
BEGIN
  UPDATE audit_types
    SET `brief` = brief, `description` = description
    WHERE `name` = aName
  ;
END //

DELIMITER ;

################################################################################
#             name                  state        manual role1 role2 role3  order
CALL addAudit('softbin_name',       'AUDITING',    TRUE, 'PE', 'TE', 'AE',  12.0);
CALL addAudit('hardbin_name',       'AUDITING',    TRUE, 'PE', 'TE', 'AE',  13.0);
CALL addAudit('testsuite_name',     'AUDITING',    TRUE, 'PE', 'TE', 'AE',  14.0);
CALL addAudit('testsuite_numbers',  'AUDITING',    TRUE, 'PE', 'TE', 'AE',  15.0);
CALL addAudit('input_parts',        'AUDITING',    TRUE, 'PE', 'TE', 'AE',  16.0);
CALL addAudit('output_parts',       'AUDITING',    TRUE, 'PE', 'TE', 'AE',  17.0);
CALL addAudit('limits',             'AUDITING',    TRUE, 'PE', 'TE', 'AE',  18.0);
CALL addAudit('datalog_gold',       'AUDITING',    TRUE, 'PE', 'TE', 'AE',  20.0);
CALL addAudit('datalog_rept',       'AUDITING',    TRUE, 'PE', 'TE', 'AE',  21.0);
CALL addAudit('datalog_open',       'AUDITING',    TRUE, 'PE', 'TE', 'AE',  22.0);
CALL addAudit('test_times',         'AUDITING',    TRUE, 'PE', 'TE', 'AE',  23.0);
CALL addAudit('test_flags',         'AUDITING',    TRUE, 'PE', 'TE', 'AE',  24.0);
CALL addAudit('configuration_file', 'AUDITING',    TRUE, 'PE', 'TE', 'AE',  25.0);
CALL addAudit('calibration_files',  'AUDITING',    TRUE, 'PE', 'TE', 'AE',  26.0);
CALL addAudit('hbin_hold_limits',   'AUDITING',    TRUE, 'PE', NULL, 'AE',  28.0);

CALL addAudit('tp_rev_name',        'AUDITING',   FALSE, 'PE', 'TE', 'AE', 101.0);
CALL addAudit('testflow_name',      'AUDITING',   FALSE, 'PE', 'TE', 'AE', 102.0);
CALL addAudit('testtable_name',     'AUDITING',   FALSE, 'PE', 'TE', 'AE', 103.0);
CALL addAudit('testtable_link',     'AUDITING',   FALSE, 'PE', 'TE', 'AE', 104.0);
CALL addAudit('testtable_unique',   'AUDITING',   FALSE, 'PE', 'TE', 'AE', 105.0);
CALL addAudit('svn_url',            'AUDITING',   FALSE, 'PE', 'TE', 'AE', 106.0);
CALL addAudit('svn_rev',            'AUDITING',   FALSE, 'PE', 'TE', 'AE', 107.0);
CALL addAudit('svn_code',           'AUDITING',   FALSE, 'PE', 'TE', 'AE', 108.0);
CALL addAudit('test_houses',        'AUDITING',   FALSE, 'PE', NULL, 'AE', 109.0);
CALL addAudit('contacts',           'AUDITING',   FALSE, 'PE', NULL, 'AE', 110.0);
CALL addAudit('liaisons',           'AUDITING',   FALSE, 'PE', NULL, 'AE', 111.0);

CALL addAudit('datalog_trial_run',  'TR_AUDITING', TRUE, 'PE', 'TE', 'AE',  22.0);

CALL addAudit('release_signoff',    'SIGNOFFS',    TRUE, 'PE_mgr', 'TE_mgr', NULL, 1000.0);

CALL addAudit('production_signoff', 'TR_SIGNOFFS', TRUE, 'PE_mgr', 'TE_mgr', NULL, 1001.0);

################################################################################

#                 audit_name          type  stage  ate
CALL auditRegExps('testflow_name',     NULL, NULL, '^[PS]$'); -- verigy only
CALL auditRegExps('testtable_name',    NULL, NULL, '^[PS]$'); -- verigy only
CALL auditRegExps('testtable_link',    NULL, NULL, '^[PS]$'); -- verigy only
CALL auditRegExps('testtable_unique',  NULL, NULL, '^[PS]$'); -- verigy only
CALL auditRegExps('wafer_hold_limits', NULL, '^W', NULL);     -- wafer test
CALL auditRegExps('datalog_open',      NULL, '^[^W]', NULL);  -- not wafer test

################################################################################

CALL auditDesc('tp_rev_name',        'Test Program Rev. Name', 'Test Program Revision name compliance');
CALL auditDesc('testflow_name',      'Testflow filename',      'testflow/FILENAME.tfw check');
CALL auditDesc('testtable_name',     'Testtable filename',     'testtable/FILENAME.tfw check');
CALL auditDesc('testtable_link',     'Testtable linkage',      'testflow/FILENAME.tfw:context_testtable_file check');
CALL auditDesc('testtable_unique',   'Testtable uniqueness',   'there can only be one *.tfw in testflow/');
CALL auditDesc('softbin_name',       'Softbin Names',          'Soft Bin name compliance');
CALL auditDesc('hardbin_name',       'Hardbin Names',          'Hard Bin name compliance');
CALL auditDesc('testsuite_name',     'Testsuite Names',        'Test Suite name compliance (functional and parametric)');
CALL auditDesc('testsuite_numbers',  'Testsuite Numbers',      'Test Suite numbering compliance (functional and parametric)');
CALL auditDesc('svn_url',            'SVN URL',                'SVN URL is compliant');
CALL auditDesc('svn_rev',            'SVN rev.',               'SVN URL rev is compliant');
CALL auditDesc('svn_code',           'SVN code',               'SVN code is available');
CALL auditDesc('test_houses',        'Test Houses',            'Test Houses have been assigned');
CALL auditDesc('contacts',           'Contacts',               'Test House contacts have been assigned');
CALL auditDesc('liaisons',           'Liaisons',               'Test House liaisons have been assigned');
CALL auditDesc('input_parts',        'Input parts',            'Check the input_part_numbers.txt file');
CALL auditDesc('output_parts',       'Output parts',           'Check the hardbin output part numbers');
CALL auditDesc('limits',             'Test Limits',            'test limits');
CALL auditDesc('datalog_gold',       'Golden Samples Datalog', 'Golden Datalog is available');
CALL auditDesc('datalog_rept',       'Repeatability Datalog',  'Repeatability Datalog is available');
CALL auditDesc('datalog_open',       'Open Socket Datalog',    'Open Socket Datalog is available');
CALL auditDesc('datalog_trial_run',  'TrialRun Datalog',       'Trial Run Datalog is available');
CALL auditDesc('test_times',         'Test times',             'Test Times');
CALL auditDesc('test_flags',         'Test flags',             'Test Flags?');
CALL auditDesc('configuration_file', 'Configuration File',     'Configuration file is available and unique');
CALL auditDesc('calibration_files',  'Calibration Files',      'Calibration files is available');
CALL auditDesc('hbin_hold_limits',   'Hardbin Hold Limits',    'Hardbin hold limits');

CALL auditDesc('release_signoff',    'Release Signoff',    'Signoff for Test Program Revision Release');

CALL auditDesc('production_signoff', 'Production Signoff', 'Signoff for Production Test Program Revision');

################################################################################

DROP PROCEDURE `auditDesc`;
DROP PROCEDURE `auditRegExps`;
DROP PROCEDURE `addAudit`;

################################################################################
################################################################################
