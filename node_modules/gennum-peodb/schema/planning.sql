################################################################################

CREATE TABLE `plan_d0_process_entries` (
  `plan_d0_process_entry_id` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY
, `user_id`             INT SIGNED        NOT NULL
, `create_time`         DOUBLE            NOT NULL -- TIME_T
, `entry_type`          ENUM('BUDGET',
                             'PLAN',
                             'ACTUAL')    NOT NULL
, `active`              BOOLEAN           NOT NULL -- the latest entry?
, `year`                SMALLINT UNSIGNED NOT NULL
, `week`                TINYINT  UNSIGNED NOT NULL
, `fab_process_id`      INT UNSIGNED      NOT NULL
, `value`               FLOAT
, FOREIGN KEY (`user_id`)        REFERENCES `users`         (`user_id`)
, FOREIGN KEY (`fab_process_id`) REFERENCES `fab_processes` (`fab_process_id`)
);


################################################################################

CREATE TABLE `plan_d0_die_entries` (
  `plan_d0_die_entry_id`  INT UNSIGNED    NOT NULL AUTO_INCREMENT PRIMARY KEY
, `user_id`             INT SIGNED        NOT NULL
, `create_time`         DOUBLE            NOT NULL -- TIME_T
, `entry_type`          ENUM('BUDGET',
                             'PLAN',
                             'ACTUAL')    NOT NULL
, `active`              BOOLEAN           NOT NULL -- the latest entry?
, `year`                SMALLINT UNSIGNED NOT NULL
, `week`                TINYINT  UNSIGNED NOT NULL
, `part_id`             INT UNSIGNED NOT NULL -- must be a die
, `value`               FLOAT
, FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`)
, FOREIGN KEY (`part_id`) REFERENCES `parts` (`part_id`)
);


################################################################################

CREATE TABLE `plan_part_yield_entries` (
  `plan_part_yield_entry_id` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY
, `user_id`             INT SIGNED        NOT NULL
, `create_time`         DOUBLE            NOT NULL -- TIME_T
, `entry_type`          ENUM('BUDGET',
                             'PLAN',
                             'ACTUAL')    NOT NULL
, `active`              BOOLEAN           NOT NULL -- the latest entry?
, `year`                SMALLINT UNSIGNED NOT NULL
, `week`                TINYINT  UNSIGNED NOT NULL
, `part_id`             INT UNSIGNED NOT NULL
, `value`               FLOAT
, FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`)
, FOREIGN KEY (`part_id`) REFERENCES `parts` (`part_id`)
);


################################################################################

CREATE TABLE `plan_test_time_entries` (
  `plan_test_time_entry_id` INT UNSIGNED  NOT NULL AUTO_INCREMENT PRIMARY KEY
, `user_id`             INT SIGNED        NOT NULL
, `create_time`         DOUBLE            NOT NULL -- TIME_T
, `entry_type`          ENUM('BUDGET',
                             'PLAN',
                             'ACTUAL')    NOT NULL
, `active`              BOOLEAN           NOT NULL -- the latest entry?
, `year`                SMALLINT UNSIGNED NOT NULL
, `week`                TINYINT  UNSIGNED NOT NULL
, `tp_id`               INT UNSIGNED NOT NULL
, `value`               FLOAT
, FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`)
, FOREIGN KEY (`tp_id`)   REFERENCES `tps`   (`tp_id`)
);


################################################################################
#
#  Generic planning information
#
#   This might be used for yield and test-time planning of parts
#   that do not yet exist in SAP, Agile, or any other system where
#   you would normally hope to find them.
#

CREATE TABLE `plan_generic_entries` (
  `plan_generic_entry_id` INT UNSIGNED  NOT NULL AUTO_INCREMENT PRIMARY KEY
, `user_id`             INT SIGNED        NOT NULL
, `create_time`         DOUBLE            NOT NULL -- TIME_T
, `entry_type`          ENUM('BUDGET',
                             'PLAN',
                             'ACTUAL')    NOT NULL
, `active`              BOOLEAN           NOT NULL -- the latest entry?
, `year`                SMALLINT UNSIGNED NOT NULL
, `week`                TINYINT  UNSIGNED NOT NULL
, `item_name`           VARCHAR(128)      NOT NULL
, `value`               FLOAT
, FOREIGN KEY (`user_id`)   REFERENCES `users` (`user_id`)
, INDEX (`item_name`)
);


################################################################################
