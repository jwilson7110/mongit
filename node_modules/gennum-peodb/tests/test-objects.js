#!/usr/bin/env node

//============================================================================//

require('colors');

var async = require('async');

var print   = console.log;
var sprintf = require('printf');
var printf  = function() { print(sprintf.apply(null, arguments)); }

var peodb = require('gennum-peodb').setDefault(require('../../../peodb.conf'));

var peodbUtils = require('../peodbUtils');

var db = peodb.sharedDB;

//============================================================================//

var types = [
  [ 'partflow',    'partflows',     'partflow_id',    'getPartflowObjectID'   ],
  [ 'part',        'parts',         'part_id',        'getPartObjectID'       ],
  [ 'step',        'steps',         'step_id',        'getStepObjectID'       ],
  [ 'fab_process', 'fab_processes', 'fab_process_id', 'getFabProcessObjectID' ],
  [ 'tp_set',      'tp_sets',       'tp_set_id',      'getTPsetObjectID', 'getTPsetStepID' ],
  [ 'tp',          'tps',           'tp_id',          'getTPObjectID',    'getTPStepID'    ],
  [ 'tp_rev',      'tp_revs',       'tp_rev_id',      'getTPrevObjectID', 'getTPrevStepID' ],
];
for (var i = 0; i < types.length; i++) {
  types[i] = {
    type:     types[i][0],
    table:    types[i][1],
    field:    types[i][2],
    func:     types[i][3],
    stepFunc: types[i][4],
  }
}

//============================================================================//

function main(cb) {
  async.forEachSeries(types,
    function(typeInfo, cb) {
      var qStr = typeInfo.field + ' FROM ' + typeInfo.table;
      peodb.select(qStr, function(err, ids) {
        if (err) {
          return cb(err);
        }
        async.forEachSeries(ids.toArray(0),
          function(id, cb) {
            checkTypedID(typeInfo, id, cb);
          },
        cb);
      });
    },
  cb);
}

function checkTypedID(typeInfo, id, cb) {
  var func = typeInfo.func;
  var type = typeInfo.type;

  async.parallel({
    typed:  function(cb) { peodbUtils.getObjectID(db, type, id, cb); },
    named:  function(cb) { peodbUtils[func]            (db, id, cb); },
    peodb1: function(cb) { peodb[func]                     (id, cb); },
    peodb2: function(cb) { peodb.getObjectID         (id, type, cb); },
    peodbArgs1: function(cb) {
      var args = {};
      args[typeInfo.field] = id;
      peodb[func](args, cb);
    },
    peodbArgs2: function(cb) {
      var args = {};
      args[typeInfo.field] = id;
      peodb.getObjectID(args, type, cb);
    },
    source: function(cb) {
      peodb[func](id, function(err, object_id) {
        if (err) { return cb(err); }
        peodb.findObjectSource(object_id, cb);
      });
    }
  },
  function(err, data) {
    if (err) { return cb(err); }
    print(data);
    return cb();
  });
}

//============================================================================//

main(function(err) {
  peodb.end();
  if (err) { print(err); }
});

//============================================================================//
