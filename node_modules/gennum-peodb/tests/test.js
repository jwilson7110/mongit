#!/usr/bin/env node

//============================================================================//

require('colors');

var async = require('async');

var print   = console.log;
var sprintf = require('printf');
var printf  = function() { print(sprintf.apply(null, arguments)); }

var peodb = require('gennum-peodb').setDefault(require('../../../peodb.conf'));

//============================================================================//

for (var k in peodb) {
  print('PEODB.' + k + ' = ' + (typeof peodb[k]));
}

//============================================================================//
//
//  collected state
//

var username = process.argv[2];
var password = process.argv[3];

var parts = null;

var part_id = null;

//============================================================================//
//============================================================================//
//
//  run the tests...
//

async.series([
    checkLogin,
    getPartIDs,
    addPart,
    addPartYieldEntry,
    getPartYieldEntries,
    addPartD0Entry,
    getPartD0Entries,
    addFabProcessD0Entry,
    getProcessD0Entries,
    addTestTimeEntry,
    getTestTimeEntries,
//    getParts,
//    getPartInfos,
    addTPrevAudits,
    getVersion,
  ],
  function(err, results) {
    print('All - Done'.green)
    print(err, results);
    peodb.end();
  }
);

//============================================================================//
//============================================================================//

function errString(err) {
  if (err) {
    return 'ERROR - ' + err.toString();
  }
  return 'OK';
}

//============================================================================//
//============================================================================//

function checkLogin(cb) {
  if (!username || !password) {
    return cb(null, 'checkLogin - SKIPPED');
  }
  peodb.checkLogin(username, password, function(err, data) {
    print('peodb.checkLogin'.bold.magenta, err, data);
    return cb(null, 'checkLogin - ' + errString(err));
  });
}

//============================================================================//


function getPartIDs(cb) {
  peodb.getPartIDs(function(err, data) {
    parts = data;
    print('peodb.getPartIDs'.bold.magenta, err, data);
    return cb(null, 'getParts - ' + errString(err));
  });
}

//============================================================================//

function addPart(cb) {
  var args = {
    user_id: -2,
    part_type_id: 8, // 'DP'
    sap_type: 'ZPRB',
    part_number: 'UN1324-IEN3',
    description: 'not a real part',
  }
  peodb.addPart(args, function(err, data) {
    print('peodb.addPart'.bold.magenta, err, data);
    part_id = data || 1;
    return cb(null, 'addPart - ' + errString(err));
  });
}

//============================================================================//

function randomEntryType() {
  var entryTypes = [
    'BUDGET',
    'PLAN',
    'ACTUAL',
  ];
  return entryTypes[Math.floor(Math.random() * entryTypes.length)];
}

//============================================================================//

function addPartYieldEntry(cb) {
  var count = 0;
  var entryCount = 100;
  print('peodb.addPartYieldEntry'.bold.magenta, entryCount);
  async.whilst(
    function() { return (count < entryCount); },
    function(cb) {
      count++;
      var args = {
        user_id: -2,
        part_id: part_id || 2,
        year: 2010 + Math.floor(Math.random() * 2),
        week: 42   + Math.floor(Math.random() * 3),
        entry_type: randomEntryType(),
        value: 20 + (70 * Math.random()),
      }
      peodb.addPartYieldEntry(args, function(err, data) {
        if (err) {
          return cb(err);
        }
        //FIXME-print('peodb.addPartYieldEntry'.bold.magenta, err, data);
        return cb();
      });
    },
    function(err) {
      var args = {
        user_id: -2,
        part_id: part_id || 2,
        year: 2010,
        week: 42,
        entry_type: 'BUDGET',
        value: null,
      }
      peodb.addPartYieldEntry(args, function(err, data) {
        return cb(null, 'addPartYieldEntry - ' + errString(err));
      });
    }
  );
}

//============================================================================//

function getPartYieldEntries(cb) {

  var args = { part_id: part_id };//FIXME, inactive: true };
  args.inactive = true;
  peodb.getPartYieldEntries(args, function(err, data) {
    print('peodb.getPartYieldEntries'.bold.magenta, err, data);
    if (err) { return cb(null, 'getPartYieldEntries - ' + errString(err)); }
    args.inactive = false;
    peodb.getPartYieldEntries(args, function(err, data) {
      print('peodb.getPartYieldEntries'.bold.magenta, err, data);
      return cb(null, 'getPartYieldEntries - ' + errString(err));
    });
  });
}

//============================================================================//

function addPartD0Entry(cb) {
  var count = 0;
  var entryCount = 100;
  print('peodb.addPartD0Entry'.bold.magenta, entryCount);
  async.whilst(
    function() { return (count < entryCount); },
    function(cb) {
      count++;
      var args = {
        user_id: -2,
        part_id: 83, // FIXME part_id || 2,
        year: 2010 + Math.floor(Math.random() * 2),
        week: 42   + Math.floor(Math.random() * 4),
        entry_type: randomEntryType(),
        value: 1.0 +(0.8 * Math.random()),
      }
      peodb.addPartD0Entry(args, function(err, data) {
        if (err) {
          return cb(err);
        }
        return cb();
      });
    },
    function(err) {
      return cb(null, 'addPartD0Entry - ' + errString(err));
    }
  );
}

//============================================================================//

function getPartD0Entries(cb) {

  var args = { part_id: part_id };//FIXME, inactive: true };
  peodb.getPartD0Entries(args, function(err, data) {
    print('peodb.getPartD0Entries'.bold.magenta, err, data);
    return cb(null, 'getPartD0Entries - ' + errString(err));
  });
}

//============================================================================//

function addFabProcessD0Entry(cb) {
  var count = 0;
  var entryCount = 100;
  print('peodb.addFabProcessD0Entry'.bold.magenta, entryCount);
  async.whilst(
    function() { return (count < entryCount); },
    function(cb) {
      count++;
      var args = {
        user_id: -2,
        fab_process_id: 2,
        year: 2010 + Math.floor(Math.random() * 2),
        week: 42   + Math.floor(Math.random() * 4),
        entry_type: randomEntryType(),
        value: 1.0 +(0.8 * Math.random()),
      }
      peodb.addFabProcessD0Entry(args, function(err, data) {
        if (err) {
          return cb(err);
        }
        return cb();
      });
    },
    function(err) {
      return cb(null, 'addFabProcessD0Entry - ' + errString(err));
    }
  );
}

//============================================================================//

function getProcessD0Entries(cb) {

  var args = { fab_process_id: 2 };//FIXME, inactive: true };
  peodb.getProcessD0Entries(args, function(err, data) {
    print('peodb.getProcessD0Entries'.bold.magenta, err, data);
    return cb(null, 'getProcessD0Entries - ' + errString(err));
  });
}

//============================================================================//

function addTestTimeEntry(cb) {
  var count = 0;
  var entryCount = 100;
  print('peodb.addTestTimeEntry'.bold.magenta, entryCount);
  async.whilst(
    function() { return (count < entryCount); },
    function(cb) {
      count++;
      var args = {
        user_id: -2,
        tp_id: 1,
        year: 2010 + Math.floor(Math.random() * 2),
        week: 42   + Math.floor(Math.random() * 4),
        entry_type: randomEntryType(),
        value: 0.001 + (0.002 * Math.random()),
      }
      peodb.addTestTimeEntry(args, function(err, data) {
        if (err) {
          return cb(err);
        }
        return cb();
      });
    },
    function(err) {
      return cb(null, 'addTestTimeEntry - ' + errString(err));
    }
  );
}

//============================================================================//

function getTestTimeEntries(cb) {

  var args = { tp_id: 9 };//FIXME, inactive: true };
  peodb.getTestTimeEntries(args, function(err, data) {
    print('peodb.getTestTimeEntries'.bold.magenta, err, data);
    return cb(null, 'getTestTimeEntries - ' + errString(err));
  });
}

//============================================================================//

function getParts(cb) {
  peodb.getParts(function(err, data) {
    print('getParts'.bold.magenta, err, data);
    return cb(null, 'getParts - ' + errString(err));
  });
}

//============================================================================//

// FIXME - skipped for now - long bloody

function getPartInfos(cb) {
  getPartInfo(0);
  function getPartInfo(index) {
    if (index >= parts.length) {
      return cb(null, 'getPartInfos - OK');
    }
    var part_id = parts[index];
    peodb.getPartInfo(part_id, function(err, data) {
      print('peodb.getPartInfo', part_id, err, data);
      getPartInfo(index + 1);
    });
  }
}

function addTPrevAudits(cb) {
  peodb.getTPrevIDs(function(err, tpRevIDs) {
    if (err) { return cb(err); }
    async.forEachSeries(tpRevIDs,
      function(tp_rev_id, cb) {
        peodb.addTPrevAudits(tp_rev_id, function(err) {
          if (err) {
            print('addTPrevAudits'.bold.magenta, tp_rev_id, err);
          }
          return cb();
        });
      },
    cb);
  });
}

//============================================================================//

function getVersion(cb) {
  peodb.getVersion(function(err, data) {
    print('peodb.getVersion'.bold.magenta, err, data);
    return cb(null, 'getVersion - ' + errString(err));
  });
}

//============================================================================//
