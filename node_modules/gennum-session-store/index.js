//============================================================================//
//============================================================================//
//
//  Author: Dave Rodgers
//  Date:   2011-10-22
//
//  Based on the connect-mysql-session, but without the `sequelize` dependency
//

var mysql = require('mysql');

var print = console.log;

var debug = false ? print : function() {};

//============================================================================//

var createTableQuery = [
  "CREATE TABLE IF NOT EXISTS `sessions` (",
  "  `sid`        VARCHAR(255)  NOT NULL  PRIMARY KEY",
  ", `json`       TEXT          NOT NULL",
  ", `expires`    INT UNSIGNED  NOT NULL",
  ", `createdAt`  DATETIME      NOT NULL",
  ") ENGINE=MyInnoDB DEFAULT CHARSET=utf8;"
].join('\n');

//============================================================================//
//============================================================================//

module.exports = function(connect) {

  function MySQLStore(dbConfig, options) {

    var self = this;

    dbConfig = dbConfig || {};
    dbConfig.host     = dbConfig.host     || 'localhost';
    dbConfig.port     = dbConfig.port     ||  3306;
    dbConfig.user     = dbConfig.user     || 'root';
    dbConfig.password = dbConfig.password || 'root';
    dbConfig.database = dbConfig.database || 'sessions';

    options = options || {};
    connect.session.Store.call(this, options);
    
    var defExpiration    = options.defaultExpiration  || (24 * 60 * 60 * 1000);
    var checkExpInterval = options.checkExpirationInterval || (10 * 60 * 1000);

    //========================================================================//

    var db = mysql.createClient(dbConfig);     
    
    //========================================================================//

    function noop() {} // no operation

    //========================================================================//

    var initialized = false;

    function initialize(cb) {
      debug('  sessionStore(initialize)', typeof cb);
      if (initialized) { return cb(); }
      db.query(createTableQuery, function(err, rows, fields) {
        if (err) { print('    error:', err); return cb(err); }
        initialized = true;
        cb();
      });
    }

    //========================================================================//

    function deleteOldSessions(cb) {
      debug('sessionStore(deleteOldSessions)');
      cb = cb || noop;
      initialize(function(err) {
        if (err) { return cb(err); }
        var expires = Math.round(Date.now() / 1000) + 60; // FIXME - fudge?
        var qStr =
          'DELETE FROM sessions WHERE expires < ' + db.escape(expires);
        db.query(qStr, function(err, rows, fields) {
          if (err) { print('  error:', err); return cb(err); }
          return cb(null, rows);
        });
      });
    }

    setInterval(deleteOldSessions, checkExpInterval);

    //========================================================================//

    this.get = function(sid, cb) {
      debug('sessionStore(get)', sid, typeof cb);
      cb = cb || noop;
      initialize(function(err) {
        if (err) { return cb(err); }
        var qStr = 'SELECT * FROM sessions WHERE sid = ' + db.escape(sid);
        db.query(qStr, function(err, rows, fields) {
          if (err) { print('  error:', err); return cb(err); }
          return cb(null, rows[0] && JSON.parse(rows[0].json));
        });
      });
    }

    //========================================================================//

    this.set = function(sid, session, cb) {
      
      debug('sessionStore(set)', sid, session, typeof cb);
      cb = cb || noop;
      initialize(function(err) {
        if (err) { return cb(err); }

        sid  = db.escape(sid);
        json = db.escape(JSON.stringify(session));

        // set expiration to match the cookie, or use the default
        var expires = session.cookie.expires ||
                      new Date(Date.now() + defExpiration);
        expires = Math.round(expires.getTime() / 1000);
        expires = db.escape(expires);        

        var insertQuery = [
          "INSERT INTO sessions(sid, json, expires, createdAt) VALUES",
          "  (" + sid + "," + json + "," + expires + ",NOW())",
          "ON DUPLICATE KEY UPDATE json = " + json + ", expires = " + expires,
        ].join('\n');
        db.query(insertQuery, function(err, rows, fields) {
          if (err) { print('  error:', err); return cb(err); }
          return cb();
        });
      });
    }

    //========================================================================//

    this.destroy = function(sid, cb) {
      debug('sessionStore(destroy)', sid, typeof cb);
      cb = cb || noop;
      initialize(function(err) {
        if (err) { return cb(err); }
        var qStr = 'DELETE FROM sessions WHERE sid = ' + db.escape(sid);
        db.query(qStr, function(err, rows, fields) {
          if (err) { print('  error:', err); return cb(err); }
          return cb();
        });
      });
    }

    //========================================================================//

    this.length = function(cb) {
      debug('sessionStore(length)', typeof cb);
      cb = cb || noop;
      initialize(function(err) {
        if (err) { return cb(err); }
        var qStr = 'SELECT count(*) as count FROM sessions';
        db.query(qStr, function(err, rows, fields) {
          if (err) { print('  error:', err); return cb(err); }
          debug('  count: ', rows[0].count);
          return cb(null, rows[0].count);
        });
      });
    }

    //========================================================================//

    this.clear = function(cb) {
      debug('sessionStore(clear)', typeof cb);
      cb = cb || noop;
      initialize(function(err) {
        if (err) { return cb(err); }
        var qStr = 'DELETE FROM sessions';
        db.query(qStr, function(err, rows, fields) {
          if (err) { print('  error:', err); return cb(err); }
          debug('  count: ', rows[0].count);
          return cb(null, rows[0].count);
        });
      });
    }

    //========================================================================//
    //
    // clear old sessions upon startup
    //
    if (false) {
      self.length(function(err, count) {
        if (err) { return; }
        deleteOldSessions(function(err) {
          if (err) { return; }
          self.length(function(err, count) {
            if (err) { return; }
          });
        });
      });
    }
  }

  MySQLStore.prototype.__proto__ = connect.session.Store.prototype;

  return MySQLStore;
};

//============================================================================//
//============================================================================//
//
//  Unit testing
//

if (require.main === module) {
  var pass = process.argv[2];
  var print = console.log;
  var connect = require('connect');
  var store = new (module.exports(connect))({ password: pass });
  for (var k in store) {
    print('> ' + k + ' ' + (typeof store[k]));
  }
  store.length(function() { print('length', arguments); });
}

//============================================================================//
//============================================================================//
